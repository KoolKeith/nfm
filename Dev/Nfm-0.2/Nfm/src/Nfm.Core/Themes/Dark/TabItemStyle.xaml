<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
					xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
					xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
					xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
					xmlns:Commands="clr-namespace:Nfm.Core.Commands"
					xmlns:DrapDrop="clr-namespace:Nfm.Core.Controls.DragDrop"
					xmlns:Icons="clr-namespace:Nfm.Core.Resources.Icons"
					xmlns:Themes="clr-namespace:Nfm.Core.Themes"
					xmlns:cb="http://www.caliburnproject.org"
					mc:Ignorable="d">

	<!-- #TabItem Style -->
	<Style x:Key="{x:Static Themes:Theme.TabItemStyleKey}"
		   TargetType="{x:Type TabItem}">
		<Style.Resources>
			<DrapDrop:PanelDragSourceAdvisor x:Key="PanelDragSourceAdvisor" />
			<DrapDrop:PanelDropTargetAdvisor x:Key="PanelDropTargetAdvisor" />
		</Style.Resources>
		<Setter Property="Foreground"
				Value="{DynamicResource {x:Static Themes:Theme.ForegroundBrushKey}}" />
		<Setter Property="FontFamily"
				Value="Verdana" />
		<Setter Property="FontSize"
				Value="12" />
		<Setter Property="Margin"
				Value="1" />
		<Setter Property="Padding"
				Value="4" />
		<Setter Property="IsTabStop"
				Value="True" />
		<Setter Property="IsSelected"
				Value="{Binding Path=IsSelected}" />
		<Setter Property="FocusVisualStyle"
				Value="{x:Null}" />
		<Setter Property="DrapDrop:DragDropManager.DragSourceAdvisor"
				Value="{DynamicResource PanelDragSourceAdvisor}"/>
		<Setter Property="DrapDrop:DragDropManager.DropTargetAdvisor"
				Value="{DynamicResource PanelDropTargetAdvisor}" />
		<Setter Property="cb:Message.Triggers">
			<Setter.Value>
				<cb:RoutedMessageTriggerCollection>
					<cb:GestureMessageTrigger Key="{Binding Source={x:Static Commands:HotKeyManager.RequestCloseHotKey}}"
										   Modifiers="{Binding Source={x:Static Commands:HotKeyManager.RequestCloseHotKeyModifiers}}">
						<cb:CommandMessage Command="{cb:Resolve Key=ClosePanel}">
							<cb:Parameter Value="{Binding Mode=OneWay}" />
						</cb:CommandMessage>
					</cb:GestureMessageTrigger>
					<cb:GestureMessageTrigger Key="{Binding Source={x:Static Commands:HotKeyManager.DuplicateHotKey}}"
										   Modifiers="{Binding Source={x:Static Commands:HotKeyManager.DuplicateHotKeyModifiers}}">
						<cb:CommandMessage Command="{cb:Resolve Key=DublicateSelectedPanel}">
							<cb:Parameter Value="{Binding Mode=OneWay}" />
						</cb:CommandMessage>
					</cb:GestureMessageTrigger>
					<cb:GestureMessageTrigger Key="{Binding Source={x:Static Commands:HotKeyManager.SwapStackContainerOrientationKey}}"
											  Modifiers="{Binding Source={x:Static Commands:HotKeyManager.SwapStackContainerOrientationModifiers}}">
						<cb:CommandMessage Command="{cb:Resolve Key=SwapStackContainerOrientation}">
							<cb:Parameter Value="{Binding Mode=OneWay}" />
						</cb:CommandMessage>
					</cb:GestureMessageTrigger>
					<cb:GestureMessageTrigger Key="{Binding Source={x:Static Commands:HotKeyManager.SplitTabContainerCommandKey}}"
											  Modifiers="{Binding Source={x:Static Commands:HotKeyManager.SplitTabContainerCommandModifiers}}">
						<cb:CommandMessage Command="{cb:Resolve Key=SplitTabContainer}">
							<cb:Parameter Value="{Binding Mode=OneWay}" />
						</cb:CommandMessage>
					</cb:GestureMessageTrigger>
					<cb:GestureMessageTrigger Key="{Binding Source={x:Static Commands:HotKeyManager.WrapPanelWithTabContainerCommandKey}}"
											  Modifiers="{Binding Source={x:Static Commands:HotKeyManager.WrapPanelWithTabContainerCommandModifiers}}">
						<cb:CommandMessage Command="{cb:Resolve Key=WrapPanelWithTabContainer}">
							<cb:Parameter Value="{Binding Mode=OneWay}" />
						</cb:CommandMessage>
					</cb:GestureMessageTrigger>
					<cb:GestureMessageTrigger Key="{Binding Source={x:Static Commands:HotKeyManager.TogglePanelHeaderCommandKey}}"
											  Modifiers="{Binding Source={x:Static Commands:HotKeyManager.TogglePanelHeaderCommandModifiers}}">
						<cb:CommandMessage Command="{cb:Resolve Key=TogglePanelHeader}">
							<cb:Parameter Value="{Binding Mode=OneWay}" />
						</cb:CommandMessage>
					</cb:GestureMessageTrigger>
				</cb:RoutedMessageTriggerCollection>
			</Setter.Value>
		</Setter>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type TabItem}">
					<Grid SnapsToDevicePixels="True">
						<Rectangle x:Name="Border"
								   Fill="{DynamicResource {x:Static Themes:Theme.ToolbarBrushKey}}"
								   Stroke="{DynamicResource {x:Static Themes:Theme.WorkAreaBackgroundBrushKey}}"
								   StrokeThickness="2"
								   RadiusX="5"
								   RadiusY="5" />
						<DockPanel>
							<Button x:Name="CloseButton"
									HorizontalAlignment="Center"
									VerticalAlignment="Center"
									Width="16"
									Height="16"
									Margin="0,0,2,0"
									DockPanel.Dock="Right"
									ToolTip="Close"
									Style="{DynamicResource {x:Static Themes:Theme.ToolbarButtonStyleKey}}">
								<Icons:CloseIcon />
								<cb:Message.Triggers>
									<cb:RoutedMessageTriggerCollection>
										<cb:EventMessageTrigger EventName="Click">
											<cb:CommandMessage Command="{cb:Resolve Key=ClosePanel}">
												<cb:Parameter Value="{Binding Mode=OneWay}" />
											</cb:CommandMessage>
										</cb:EventMessageTrigger>
									</cb:RoutedMessageTriggerCollection>
								</cb:Message.Triggers>
							</Button>
							<ContentPresenter x:Name="Content"
											  SnapsToDevicePixels="True"
											  VerticalAlignment="Center"
											  HorizontalAlignment="Center"
											  ContentSource="Header"
											  Margin="{TemplateBinding Padding}" />
						</DockPanel>
					</Grid>
<!--
					<Border 
							BorderBrush="{DynamicResource {x:Static Themes:Theme.WorkAreaBackgroundBrushKey}}"
							Background="{DynamicResource {x:Static Themes:Theme.WorkAreaBackgroundBrushKey}}"
							BorderThickness="2"
							CornerRadius="5"
							SnapsToDevicePixels="True"
							d:DesignHeight="84"
							d:DesignWidth="300">
					</Border>
-->
					<ControlTemplate.Triggers>
						<Trigger Property="IsSelected"
								 Value="True">
							<Setter TargetName="Border"
									Property="Fill"
									Value="{DynamicResource {x:Static Themes:Theme.WorkAreaBackgroundBrushKey}}" />
							<!-- Todo: Make it configurable: multiline tabs appearence -->
							<!--<Setter Property="Margin"
									Value="0" />-->
							<!--<Setter TargetName="Border"
									Property="CornerRadius"
									Value="5,5,0,0" />-->
							<!--Todo: Make it configurable: tab close button visibility -->
<!--							<Setter TargetName="CloseButton"-->
<!--									Property="Visibility"-->
<!--									Value="Visible" />-->
						</Trigger>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="IsMouseOver"
										   Value="True" />
								<Condition Property="IsSelected"
										   Value="False" />
							</MultiTrigger.Conditions>
							<MultiTrigger.Setters>
								<Setter TargetName="Border"
										Property="Fill"
										Value="{DynamicResource {x:Static Themes:Theme.WorkAreaBackgroundBrushKey}}" />
							</MultiTrigger.Setters>
						</MultiTrigger>
						<Trigger Property="IsKeyboardFocused"
								 Value="true">
							<Setter TargetName="Border"
									Property="Stroke"
									Value="{DynamicResource {x:Static Themes:Theme.KeyboardFocuseBrushKey}}" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

</ResourceDictionary>