//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.ServiceReference, version 4.0.50401.0
// 
namespace Fab.Client.ApiServiceReference {
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Account", Namespace="http://schemas.datacontract.org/2004/07/Fab.Server.Core", IsReference=true)]
    public partial class Account : Fab.Client.ApiServiceReference.EntityObject {
        
        private Fab.Client.ApiServiceReference.AssetType AssetTypeField;
        
        private Fab.Client.ApiServiceReference.EntityReferenceOfAssetTypeQ4jSz9U_P AssetTypeReferenceField;
        
        private System.DateTime CreatedField;
        
        private int IdField;
        
        private bool IsDeletedField;
        
        private string NameField;
        
        private Fab.Client.ApiServiceReference.Posting[] PostingsField;
        
        private Fab.Client.ApiServiceReference.User UserField;
        
        private Fab.Client.ApiServiceReference.EntityReferenceOfUserQ4jSz9U_P UserReferenceField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Fab.Client.ApiServiceReference.AssetType AssetType {
            get {
                return this.AssetTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.AssetTypeField, value) != true)) {
                    this.AssetTypeField = value;
                    this.RaisePropertyChanged("AssetType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Fab.Client.ApiServiceReference.EntityReferenceOfAssetTypeQ4jSz9U_P AssetTypeReference {
            get {
                return this.AssetTypeReferenceField;
            }
            set {
                if ((object.ReferenceEquals(this.AssetTypeReferenceField, value) != true)) {
                    this.AssetTypeReferenceField = value;
                    this.RaisePropertyChanged("AssetTypeReference");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime Created {
            get {
                return this.CreatedField;
            }
            set {
                if ((this.CreatedField.Equals(value) != true)) {
                    this.CreatedField = value;
                    this.RaisePropertyChanged("Created");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsDeleted {
            get {
                return this.IsDeletedField;
            }
            set {
                if ((this.IsDeletedField.Equals(value) != true)) {
                    this.IsDeletedField = value;
                    this.RaisePropertyChanged("IsDeleted");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Fab.Client.ApiServiceReference.Posting[] Postings {
            get {
                return this.PostingsField;
            }
            set {
                if ((object.ReferenceEquals(this.PostingsField, value) != true)) {
                    this.PostingsField = value;
                    this.RaisePropertyChanged("Postings");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Fab.Client.ApiServiceReference.User User {
            get {
                return this.UserField;
            }
            set {
                if ((object.ReferenceEquals(this.UserField, value) != true)) {
                    this.UserField = value;
                    this.RaisePropertyChanged("User");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Fab.Client.ApiServiceReference.EntityReferenceOfUserQ4jSz9U_P UserReference {
            get {
                return this.UserReferenceField;
            }
            set {
                if ((object.ReferenceEquals(this.UserReferenceField, value) != true)) {
                    this.UserReferenceField = value;
                    this.RaisePropertyChanged("UserReference");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="StructuralObject", Namespace="http://schemas.datacontract.org/2004/07/System.Data.Objects.DataClasses", IsReference=true)]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Fab.Client.ApiServiceReference.EntityObject))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Fab.Client.ApiServiceReference.AssetType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Fab.Client.ApiServiceReference.Posting))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Fab.Client.ApiServiceReference.Journal))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Fab.Client.ApiServiceReference.JournalType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Fab.Client.ApiServiceReference.Transaction))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Fab.Client.ApiServiceReference.Category))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Fab.Client.ApiServiceReference.User))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Fab.Client.ApiServiceReference.Account))]
    public partial class StructuralObject : object, System.ComponentModel.INotifyPropertyChanged {
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="EntityObject", Namespace="http://schemas.datacontract.org/2004/07/System.Data.Objects.DataClasses", IsReference=true)]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Fab.Client.ApiServiceReference.AssetType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Fab.Client.ApiServiceReference.Posting))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Fab.Client.ApiServiceReference.Journal))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Fab.Client.ApiServiceReference.JournalType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Fab.Client.ApiServiceReference.Transaction))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Fab.Client.ApiServiceReference.Category))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Fab.Client.ApiServiceReference.User))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Fab.Client.ApiServiceReference.Account))]
    public partial class EntityObject : Fab.Client.ApiServiceReference.StructuralObject {
        
        private Fab.Client.ApiServiceReference.EntityKey EntityKeyField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Fab.Client.ApiServiceReference.EntityKey EntityKey {
            get {
                return this.EntityKeyField;
            }
            set {
                if ((object.ReferenceEquals(this.EntityKeyField, value) != true)) {
                    this.EntityKeyField = value;
                    this.RaisePropertyChanged("EntityKey");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AssetType", Namespace="http://schemas.datacontract.org/2004/07/Fab.Server.Core", IsReference=true)]
    public partial class AssetType : Fab.Client.ApiServiceReference.EntityObject {
        
        private Fab.Client.ApiServiceReference.Account[] AccountsField;
        
        private int IdField;
        
        private string NameField;
        
        private Fab.Client.ApiServiceReference.Posting[] PostingsField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Fab.Client.ApiServiceReference.Account[] Accounts {
            get {
                return this.AccountsField;
            }
            set {
                if ((object.ReferenceEquals(this.AccountsField, value) != true)) {
                    this.AccountsField = value;
                    this.RaisePropertyChanged("Accounts");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Fab.Client.ApiServiceReference.Posting[] Postings {
            get {
                return this.PostingsField;
            }
            set {
                if ((object.ReferenceEquals(this.PostingsField, value) != true)) {
                    this.PostingsField = value;
                    this.RaisePropertyChanged("Postings");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Posting", Namespace="http://schemas.datacontract.org/2004/07/Fab.Server.Core", IsReference=true)]
    public partial class Posting : Fab.Client.ApiServiceReference.EntityObject {
        
        private Fab.Client.ApiServiceReference.Account AccountField;
        
        private Fab.Client.ApiServiceReference.EntityReferenceOfAccountQ4jSz9U_P AccountReferenceField;
        
        private decimal AmountField;
        
        private Fab.Client.ApiServiceReference.AssetType AssetTypeField;
        
        private Fab.Client.ApiServiceReference.EntityReferenceOfAssetTypeQ4jSz9U_P AssetTypeReferenceField;
        
        private System.DateTime DateField;
        
        private int IdField;
        
        private Fab.Client.ApiServiceReference.Journal JournalField;
        
        private Fab.Client.ApiServiceReference.EntityReferenceOfJournalQ4jSz9U_P JournalReferenceField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Fab.Client.ApiServiceReference.Account Account {
            get {
                return this.AccountField;
            }
            set {
                if ((object.ReferenceEquals(this.AccountField, value) != true)) {
                    this.AccountField = value;
                    this.RaisePropertyChanged("Account");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Fab.Client.ApiServiceReference.EntityReferenceOfAccountQ4jSz9U_P AccountReference {
            get {
                return this.AccountReferenceField;
            }
            set {
                if ((object.ReferenceEquals(this.AccountReferenceField, value) != true)) {
                    this.AccountReferenceField = value;
                    this.RaisePropertyChanged("AccountReference");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal Amount {
            get {
                return this.AmountField;
            }
            set {
                if ((this.AmountField.Equals(value) != true)) {
                    this.AmountField = value;
                    this.RaisePropertyChanged("Amount");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Fab.Client.ApiServiceReference.AssetType AssetType {
            get {
                return this.AssetTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.AssetTypeField, value) != true)) {
                    this.AssetTypeField = value;
                    this.RaisePropertyChanged("AssetType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Fab.Client.ApiServiceReference.EntityReferenceOfAssetTypeQ4jSz9U_P AssetTypeReference {
            get {
                return this.AssetTypeReferenceField;
            }
            set {
                if ((object.ReferenceEquals(this.AssetTypeReferenceField, value) != true)) {
                    this.AssetTypeReferenceField = value;
                    this.RaisePropertyChanged("AssetTypeReference");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime Date {
            get {
                return this.DateField;
            }
            set {
                if ((this.DateField.Equals(value) != true)) {
                    this.DateField = value;
                    this.RaisePropertyChanged("Date");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Fab.Client.ApiServiceReference.Journal Journal {
            get {
                return this.JournalField;
            }
            set {
                if ((object.ReferenceEquals(this.JournalField, value) != true)) {
                    this.JournalField = value;
                    this.RaisePropertyChanged("Journal");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Fab.Client.ApiServiceReference.EntityReferenceOfJournalQ4jSz9U_P JournalReference {
            get {
                return this.JournalReferenceField;
            }
            set {
                if ((object.ReferenceEquals(this.JournalReferenceField, value) != true)) {
                    this.JournalReferenceField = value;
                    this.RaisePropertyChanged("JournalReference");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Journal", Namespace="http://schemas.datacontract.org/2004/07/Fab.Server.Core", IsReference=true)]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Fab.Client.ApiServiceReference.Transaction))]
    public partial class Journal : Fab.Client.ApiServiceReference.EntityObject {
        
        private int IdField;
        
        private Fab.Client.ApiServiceReference.JournalType JournalTypeField;
        
        private Fab.Client.ApiServiceReference.EntityReferenceOfJournalTypeQ4jSz9U_P JournalTypeReferenceField;
        
        private Fab.Client.ApiServiceReference.Posting[] PostingsField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Fab.Client.ApiServiceReference.JournalType JournalType {
            get {
                return this.JournalTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.JournalTypeField, value) != true)) {
                    this.JournalTypeField = value;
                    this.RaisePropertyChanged("JournalType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Fab.Client.ApiServiceReference.EntityReferenceOfJournalTypeQ4jSz9U_P JournalTypeReference {
            get {
                return this.JournalTypeReferenceField;
            }
            set {
                if ((object.ReferenceEquals(this.JournalTypeReferenceField, value) != true)) {
                    this.JournalTypeReferenceField = value;
                    this.RaisePropertyChanged("JournalTypeReference");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Fab.Client.ApiServiceReference.Posting[] Postings {
            get {
                return this.PostingsField;
            }
            set {
                if ((object.ReferenceEquals(this.PostingsField, value) != true)) {
                    this.PostingsField = value;
                    this.RaisePropertyChanged("Postings");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="JournalType", Namespace="http://schemas.datacontract.org/2004/07/Fab.Server.Core", IsReference=true)]
    public partial class JournalType : Fab.Client.ApiServiceReference.EntityObject {
        
        private int IdField;
        
        private Fab.Client.ApiServiceReference.Journal[] JournalsField;
        
        private string NameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Fab.Client.ApiServiceReference.Journal[] Journals {
            get {
                return this.JournalsField;
            }
            set {
                if ((object.ReferenceEquals(this.JournalsField, value) != true)) {
                    this.JournalsField = value;
                    this.RaisePropertyChanged("Journals");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Transaction", Namespace="http://schemas.datacontract.org/2004/07/Fab.Server.Core", IsReference=true)]
    public partial class Transaction : Fab.Client.ApiServiceReference.Journal {
        
        private Fab.Client.ApiServiceReference.Category CategoryField;
        
        private Fab.Client.ApiServiceReference.EntityReferenceOfCategoryQ4jSz9U_P CategoryReferenceField;
        
        private string CommentField;
        
        private bool IsDeletedField;
        
        private decimal PriceField;
        
        private decimal QuantityField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Fab.Client.ApiServiceReference.Category Category {
            get {
                return this.CategoryField;
            }
            set {
                if ((object.ReferenceEquals(this.CategoryField, value) != true)) {
                    this.CategoryField = value;
                    this.RaisePropertyChanged("Category");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Fab.Client.ApiServiceReference.EntityReferenceOfCategoryQ4jSz9U_P CategoryReference {
            get {
                return this.CategoryReferenceField;
            }
            set {
                if ((object.ReferenceEquals(this.CategoryReferenceField, value) != true)) {
                    this.CategoryReferenceField = value;
                    this.RaisePropertyChanged("CategoryReference");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Comment {
            get {
                return this.CommentField;
            }
            set {
                if ((object.ReferenceEquals(this.CommentField, value) != true)) {
                    this.CommentField = value;
                    this.RaisePropertyChanged("Comment");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsDeleted {
            get {
                return this.IsDeletedField;
            }
            set {
                if ((this.IsDeletedField.Equals(value) != true)) {
                    this.IsDeletedField = value;
                    this.RaisePropertyChanged("IsDeleted");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal Price {
            get {
                return this.PriceField;
            }
            set {
                if ((this.PriceField.Equals(value) != true)) {
                    this.PriceField = value;
                    this.RaisePropertyChanged("Price");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal Quantity {
            get {
                return this.QuantityField;
            }
            set {
                if ((this.QuantityField.Equals(value) != true)) {
                    this.QuantityField = value;
                    this.RaisePropertyChanged("Quantity");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Category", Namespace="http://schemas.datacontract.org/2004/07/Fab.Server.Core", IsReference=true)]
    public partial class Category : Fab.Client.ApiServiceReference.EntityObject {
        
        private int IdField;
        
        private bool IsDeletedField;
        
        private string NameField;
        
        private Fab.Client.ApiServiceReference.Transaction[] TransactionsField;
        
        private Fab.Client.ApiServiceReference.User UserField;
        
        private Fab.Client.ApiServiceReference.EntityReferenceOfUserQ4jSz9U_P UserReferenceField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsDeleted {
            get {
                return this.IsDeletedField;
            }
            set {
                if ((this.IsDeletedField.Equals(value) != true)) {
                    this.IsDeletedField = value;
                    this.RaisePropertyChanged("IsDeleted");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Fab.Client.ApiServiceReference.Transaction[] Transactions {
            get {
                return this.TransactionsField;
            }
            set {
                if ((object.ReferenceEquals(this.TransactionsField, value) != true)) {
                    this.TransactionsField = value;
                    this.RaisePropertyChanged("Transactions");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Fab.Client.ApiServiceReference.User User {
            get {
                return this.UserField;
            }
            set {
                if ((object.ReferenceEquals(this.UserField, value) != true)) {
                    this.UserField = value;
                    this.RaisePropertyChanged("User");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Fab.Client.ApiServiceReference.EntityReferenceOfUserQ4jSz9U_P UserReference {
            get {
                return this.UserReferenceField;
            }
            set {
                if ((object.ReferenceEquals(this.UserReferenceField, value) != true)) {
                    this.UserReferenceField = value;
                    this.RaisePropertyChanged("UserReference");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="User", Namespace="http://schemas.datacontract.org/2004/07/Fab.Server.Core", IsReference=true)]
    public partial class User : Fab.Client.ApiServiceReference.EntityObject {
        
        private Fab.Client.ApiServiceReference.Account[] AccountsField;
        
        private Fab.Client.ApiServiceReference.Category[] CategoriesField;
        
        private string EmailField;
        
        private System.Guid IdField;
        
        private bool IsDisabledField;
        
        private System.Nullable<System.DateTime> LastAccessField;
        
        private string LoginField;
        
        private string PasswordField;
        
        private System.DateTime RegisteredField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Fab.Client.ApiServiceReference.Account[] Accounts {
            get {
                return this.AccountsField;
            }
            set {
                if ((object.ReferenceEquals(this.AccountsField, value) != true)) {
                    this.AccountsField = value;
                    this.RaisePropertyChanged("Accounts");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Fab.Client.ApiServiceReference.Category[] Categories {
            get {
                return this.CategoriesField;
            }
            set {
                if ((object.ReferenceEquals(this.CategoriesField, value) != true)) {
                    this.CategoriesField = value;
                    this.RaisePropertyChanged("Categories");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Email {
            get {
                return this.EmailField;
            }
            set {
                if ((object.ReferenceEquals(this.EmailField, value) != true)) {
                    this.EmailField = value;
                    this.RaisePropertyChanged("Email");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsDisabled {
            get {
                return this.IsDisabledField;
            }
            set {
                if ((this.IsDisabledField.Equals(value) != true)) {
                    this.IsDisabledField = value;
                    this.RaisePropertyChanged("IsDisabled");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> LastAccess {
            get {
                return this.LastAccessField;
            }
            set {
                if ((this.LastAccessField.Equals(value) != true)) {
                    this.LastAccessField = value;
                    this.RaisePropertyChanged("LastAccess");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Login {
            get {
                return this.LoginField;
            }
            set {
                if ((object.ReferenceEquals(this.LoginField, value) != true)) {
                    this.LoginField = value;
                    this.RaisePropertyChanged("Login");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Password {
            get {
                return this.PasswordField;
            }
            set {
                if ((object.ReferenceEquals(this.PasswordField, value) != true)) {
                    this.PasswordField = value;
                    this.RaisePropertyChanged("Password");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime Registered {
            get {
                return this.RegisteredField;
            }
            set {
                if ((this.RegisteredField.Equals(value) != true)) {
                    this.RegisteredField = value;
                    this.RaisePropertyChanged("Registered");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="EntityKey", Namespace="http://schemas.datacontract.org/2004/07/System.Data", IsReference=true)]
    public partial class EntityKey : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string EntityContainerNameField;
        
        private Fab.Client.ApiServiceReference.EntityKeyMember[] EntityKeyValuesField;
        
        private string EntitySetNameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string EntityContainerName {
            get {
                return this.EntityContainerNameField;
            }
            set {
                if ((object.ReferenceEquals(this.EntityContainerNameField, value) != true)) {
                    this.EntityContainerNameField = value;
                    this.RaisePropertyChanged("EntityContainerName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Fab.Client.ApiServiceReference.EntityKeyMember[] EntityKeyValues {
            get {
                return this.EntityKeyValuesField;
            }
            set {
                if ((object.ReferenceEquals(this.EntityKeyValuesField, value) != true)) {
                    this.EntityKeyValuesField = value;
                    this.RaisePropertyChanged("EntityKeyValues");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string EntitySetName {
            get {
                return this.EntitySetNameField;
            }
            set {
                if ((object.ReferenceEquals(this.EntitySetNameField, value) != true)) {
                    this.EntitySetNameField = value;
                    this.RaisePropertyChanged("EntitySetName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="EntityReferenceOfAssetTypeQ4jSz9U_P", Namespace="http://schemas.datacontract.org/2004/07/System.Data.Objects.DataClasses")]
    public partial class EntityReferenceOfAssetTypeQ4jSz9U_P : Fab.Client.ApiServiceReference.EntityReference {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="EntityReferenceOfUserQ4jSz9U_P", Namespace="http://schemas.datacontract.org/2004/07/System.Data.Objects.DataClasses")]
    public partial class EntityReferenceOfUserQ4jSz9U_P : Fab.Client.ApiServiceReference.EntityReference {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="EntityKeyMember", Namespace="http://schemas.datacontract.org/2004/07/System.Data")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Fab.Client.ApiServiceReference.Account[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Fab.Client.ApiServiceReference.Account))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Fab.Client.ApiServiceReference.AssetType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Fab.Client.ApiServiceReference.Posting[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Fab.Client.ApiServiceReference.Posting))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Fab.Client.ApiServiceReference.Journal))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Fab.Client.ApiServiceReference.JournalType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Fab.Client.ApiServiceReference.Journal[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Fab.Client.ApiServiceReference.Transaction))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Fab.Client.ApiServiceReference.Category))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Fab.Client.ApiServiceReference.Transaction[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Fab.Client.ApiServiceReference.User))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Fab.Client.ApiServiceReference.Category[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Fab.Client.ApiServiceReference.AssetType[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Fab.Client.ApiServiceReference.JournalType[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Fab.Client.ApiServiceReference.TransactionRecord[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Fab.Client.ApiServiceReference.TransactionRecord))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Fab.Client.ApiServiceReference.EntityObject))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Fab.Client.ApiServiceReference.StructuralObject))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Fab.Client.ApiServiceReference.EntityReferenceOfAccountQ4jSz9U_P))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Fab.Client.ApiServiceReference.EntityReference))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Fab.Client.ApiServiceReference.RelatedEnd))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Fab.Client.ApiServiceReference.EntityReferenceOfAssetTypeQ4jSz9U_P))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Fab.Client.ApiServiceReference.EntityReferenceOfJournalTypeQ4jSz9U_P))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Fab.Client.ApiServiceReference.EntityReferenceOfUserQ4jSz9U_P))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Fab.Client.ApiServiceReference.EntityReferenceOfCategoryQ4jSz9U_P))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Fab.Client.ApiServiceReference.EntityReferenceOfJournalQ4jSz9U_P))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Fab.Client.ApiServiceReference.EntityKey))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Fab.Client.ApiServiceReference.EntityKeyMember[]))]
    public partial class EntityKeyMember : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string KeyField;
        
        private object ValueField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Key {
            get {
                return this.KeyField;
            }
            set {
                if ((object.ReferenceEquals(this.KeyField, value) != true)) {
                    this.KeyField = value;
                    this.RaisePropertyChanged("Key");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public object Value {
            get {
                return this.ValueField;
            }
            set {
                if ((object.ReferenceEquals(this.ValueField, value) != true)) {
                    this.ValueField = value;
                    this.RaisePropertyChanged("Value");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TransactionRecord", Namespace="http://schemas.datacontract.org/2004/07/Fab.Server.Core")]
    public partial class TransactionRecord : object, System.ComponentModel.INotifyPropertyChanged {
        
        private decimal BalanceField;
        
        private Fab.Client.ApiServiceReference.Category CategoryField;
        
        private string CommentField;
        
        private System.DateTime DateField;
        
        private decimal ExpenseField;
        
        private decimal IncomeField;
        
        private decimal PriceField;
        
        private decimal QuantityField;
        
        private int TransactionIdField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal Balance {
            get {
                return this.BalanceField;
            }
            set {
                if ((this.BalanceField.Equals(value) != true)) {
                    this.BalanceField = value;
                    this.RaisePropertyChanged("Balance");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Fab.Client.ApiServiceReference.Category Category {
            get {
                return this.CategoryField;
            }
            set {
                if ((object.ReferenceEquals(this.CategoryField, value) != true)) {
                    this.CategoryField = value;
                    this.RaisePropertyChanged("Category");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Comment {
            get {
                return this.CommentField;
            }
            set {
                if ((object.ReferenceEquals(this.CommentField, value) != true)) {
                    this.CommentField = value;
                    this.RaisePropertyChanged("Comment");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime Date {
            get {
                return this.DateField;
            }
            set {
                if ((this.DateField.Equals(value) != true)) {
                    this.DateField = value;
                    this.RaisePropertyChanged("Date");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal Expense {
            get {
                return this.ExpenseField;
            }
            set {
                if ((this.ExpenseField.Equals(value) != true)) {
                    this.ExpenseField = value;
                    this.RaisePropertyChanged("Expense");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal Income {
            get {
                return this.IncomeField;
            }
            set {
                if ((this.IncomeField.Equals(value) != true)) {
                    this.IncomeField = value;
                    this.RaisePropertyChanged("Income");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal Price {
            get {
                return this.PriceField;
            }
            set {
                if ((this.PriceField.Equals(value) != true)) {
                    this.PriceField = value;
                    this.RaisePropertyChanged("Price");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal Quantity {
            get {
                return this.QuantityField;
            }
            set {
                if ((this.QuantityField.Equals(value) != true)) {
                    this.QuantityField = value;
                    this.RaisePropertyChanged("Quantity");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TransactionId {
            get {
                return this.TransactionIdField;
            }
            set {
                if ((this.TransactionIdField.Equals(value) != true)) {
                    this.TransactionIdField = value;
                    this.RaisePropertyChanged("TransactionId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="EntityReferenceOfAccountQ4jSz9U_P", Namespace="http://schemas.datacontract.org/2004/07/System.Data.Objects.DataClasses")]
    public partial class EntityReferenceOfAccountQ4jSz9U_P : Fab.Client.ApiServiceReference.EntityReference {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="EntityReference", Namespace="http://schemas.datacontract.org/2004/07/System.Data.Objects.DataClasses")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Fab.Client.ApiServiceReference.EntityReferenceOfAssetTypeQ4jSz9U_P))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Fab.Client.ApiServiceReference.EntityReferenceOfJournalTypeQ4jSz9U_P))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Fab.Client.ApiServiceReference.EntityReferenceOfUserQ4jSz9U_P))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Fab.Client.ApiServiceReference.EntityReferenceOfCategoryQ4jSz9U_P))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Fab.Client.ApiServiceReference.EntityReferenceOfJournalQ4jSz9U_P))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Fab.Client.ApiServiceReference.EntityReferenceOfAccountQ4jSz9U_P))]
    public partial class EntityReference : Fab.Client.ApiServiceReference.RelatedEnd {
        
        private Fab.Client.ApiServiceReference.EntityKey EntityKeyField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Fab.Client.ApiServiceReference.EntityKey EntityKey {
            get {
                return this.EntityKeyField;
            }
            set {
                if ((object.ReferenceEquals(this.EntityKeyField, value) != true)) {
                    this.EntityKeyField = value;
                    this.RaisePropertyChanged("EntityKey");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RelatedEnd", Namespace="http://schemas.datacontract.org/2004/07/System.Data.Objects.DataClasses")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Fab.Client.ApiServiceReference.EntityReference))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Fab.Client.ApiServiceReference.EntityReferenceOfAssetTypeQ4jSz9U_P))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Fab.Client.ApiServiceReference.EntityReferenceOfJournalTypeQ4jSz9U_P))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Fab.Client.ApiServiceReference.EntityReferenceOfUserQ4jSz9U_P))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Fab.Client.ApiServiceReference.EntityReferenceOfCategoryQ4jSz9U_P))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Fab.Client.ApiServiceReference.EntityReferenceOfJournalQ4jSz9U_P))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Fab.Client.ApiServiceReference.EntityReferenceOfAccountQ4jSz9U_P))]
    public partial class RelatedEnd : object, System.ComponentModel.INotifyPropertyChanged {
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="EntityReferenceOfJournalTypeQ4jSz9U_P", Namespace="http://schemas.datacontract.org/2004/07/System.Data.Objects.DataClasses")]
    public partial class EntityReferenceOfJournalTypeQ4jSz9U_P : Fab.Client.ApiServiceReference.EntityReference {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="EntityReferenceOfCategoryQ4jSz9U_P", Namespace="http://schemas.datacontract.org/2004/07/System.Data.Objects.DataClasses")]
    public partial class EntityReferenceOfCategoryQ4jSz9U_P : Fab.Client.ApiServiceReference.EntityReference {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="EntityReferenceOfJournalQ4jSz9U_P", Namespace="http://schemas.datacontract.org/2004/07/System.Data.Objects.DataClasses")]
    public partial class EntityReferenceOfJournalQ4jSz9U_P : Fab.Client.ApiServiceReference.EntityReference {
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ApiServiceReference.IUserService")]
    public interface IUserService {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IUserService/GenerateUniqueLogin", ReplyAction="http://tempuri.org/IUserService/GenerateUniqueLoginResponse")]
        System.IAsyncResult BeginGenerateUniqueLogin(System.AsyncCallback callback, object asyncState);
        
        string EndGenerateUniqueLogin(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IUserService/IsLoginAvailable", ReplyAction="http://tempuri.org/IUserService/IsLoginAvailableResponse")]
        System.IAsyncResult BeginIsLoginAvailable(string login, System.AsyncCallback callback, object asyncState);
        
        bool EndIsLoginAvailable(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IUserService/Register", ReplyAction="http://tempuri.org/IUserService/RegisterResponse")]
        System.IAsyncResult BeginRegister(string login, string password, System.AsyncCallback callback, object asyncState);
        
        System.Guid EndRegister(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IUserService/Update", ReplyAction="http://tempuri.org/IUserService/UpdateResponse")]
        System.IAsyncResult BeginUpdate(System.Guid userId, string oldPassword, string newPassword, string newEmail, System.AsyncCallback callback, object asyncState);
        
        void EndUpdate(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IUserService/GetUserId", ReplyAction="http://tempuri.org/IUserService/GetUserIdResponse")]
        System.IAsyncResult BeginGetUserId(string login, System.AsyncCallback callback, object asyncState);
        
        System.Guid EndGetUserId(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IUserService/ResetPassword", ReplyAction="http://tempuri.org/IUserService/ResetPasswordResponse")]
        System.IAsyncResult BeginResetPassword(string login, string email, System.AsyncCallback callback, object asyncState);
        
        void EndResetPassword(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IUserServiceChannel : Fab.Client.ApiServiceReference.IUserService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GenerateUniqueLoginCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GenerateUniqueLoginCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class IsLoginAvailableCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public IsLoginAvailableCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RegisterCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public RegisterCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Guid Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Guid)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetUserIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetUserIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Guid Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Guid)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class UserServiceClient : System.ServiceModel.ClientBase<Fab.Client.ApiServiceReference.IUserService>, Fab.Client.ApiServiceReference.IUserService {
        
        private BeginOperationDelegate onBeginGenerateUniqueLoginDelegate;
        
        private EndOperationDelegate onEndGenerateUniqueLoginDelegate;
        
        private System.Threading.SendOrPostCallback onGenerateUniqueLoginCompletedDelegate;
        
        private BeginOperationDelegate onBeginIsLoginAvailableDelegate;
        
        private EndOperationDelegate onEndIsLoginAvailableDelegate;
        
        private System.Threading.SendOrPostCallback onIsLoginAvailableCompletedDelegate;
        
        private BeginOperationDelegate onBeginRegisterDelegate;
        
        private EndOperationDelegate onEndRegisterDelegate;
        
        private System.Threading.SendOrPostCallback onRegisterCompletedDelegate;
        
        private BeginOperationDelegate onBeginUpdateDelegate;
        
        private EndOperationDelegate onEndUpdateDelegate;
        
        private System.Threading.SendOrPostCallback onUpdateCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetUserIdDelegate;
        
        private EndOperationDelegate onEndGetUserIdDelegate;
        
        private System.Threading.SendOrPostCallback onGetUserIdCompletedDelegate;
        
        private BeginOperationDelegate onBeginResetPasswordDelegate;
        
        private EndOperationDelegate onEndResetPasswordDelegate;
        
        private System.Threading.SendOrPostCallback onResetPasswordCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public UserServiceClient() {
        }
        
        public UserServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public UserServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public UserServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public UserServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                            "ookieContainerBindingElement.");
                }
            }
        }
        
        public event System.EventHandler<GenerateUniqueLoginCompletedEventArgs> GenerateUniqueLoginCompleted;
        
        public event System.EventHandler<IsLoginAvailableCompletedEventArgs> IsLoginAvailableCompleted;
        
        public event System.EventHandler<RegisterCompletedEventArgs> RegisterCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> UpdateCompleted;
        
        public event System.EventHandler<GetUserIdCompletedEventArgs> GetUserIdCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> ResetPasswordCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Fab.Client.ApiServiceReference.IUserService.BeginGenerateUniqueLogin(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGenerateUniqueLogin(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string Fab.Client.ApiServiceReference.IUserService.EndGenerateUniqueLogin(System.IAsyncResult result) {
            return base.Channel.EndGenerateUniqueLogin(result);
        }
        
        private System.IAsyncResult OnBeginGenerateUniqueLogin(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((Fab.Client.ApiServiceReference.IUserService)(this)).BeginGenerateUniqueLogin(callback, asyncState);
        }
        
        private object[] OnEndGenerateUniqueLogin(System.IAsyncResult result) {
            string retVal = ((Fab.Client.ApiServiceReference.IUserService)(this)).EndGenerateUniqueLogin(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGenerateUniqueLoginCompleted(object state) {
            if ((this.GenerateUniqueLoginCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GenerateUniqueLoginCompleted(this, new GenerateUniqueLoginCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GenerateUniqueLoginAsync() {
            this.GenerateUniqueLoginAsync(null);
        }
        
        public void GenerateUniqueLoginAsync(object userState) {
            if ((this.onBeginGenerateUniqueLoginDelegate == null)) {
                this.onBeginGenerateUniqueLoginDelegate = new BeginOperationDelegate(this.OnBeginGenerateUniqueLogin);
            }
            if ((this.onEndGenerateUniqueLoginDelegate == null)) {
                this.onEndGenerateUniqueLoginDelegate = new EndOperationDelegate(this.OnEndGenerateUniqueLogin);
            }
            if ((this.onGenerateUniqueLoginCompletedDelegate == null)) {
                this.onGenerateUniqueLoginCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGenerateUniqueLoginCompleted);
            }
            base.InvokeAsync(this.onBeginGenerateUniqueLoginDelegate, null, this.onEndGenerateUniqueLoginDelegate, this.onGenerateUniqueLoginCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Fab.Client.ApiServiceReference.IUserService.BeginIsLoginAvailable(string login, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginIsLoginAvailable(login, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bool Fab.Client.ApiServiceReference.IUserService.EndIsLoginAvailable(System.IAsyncResult result) {
            return base.Channel.EndIsLoginAvailable(result);
        }
        
        private System.IAsyncResult OnBeginIsLoginAvailable(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string login = ((string)(inValues[0]));
            return ((Fab.Client.ApiServiceReference.IUserService)(this)).BeginIsLoginAvailable(login, callback, asyncState);
        }
        
        private object[] OnEndIsLoginAvailable(System.IAsyncResult result) {
            bool retVal = ((Fab.Client.ApiServiceReference.IUserService)(this)).EndIsLoginAvailable(result);
            return new object[] {
                    retVal};
        }
        
        private void OnIsLoginAvailableCompleted(object state) {
            if ((this.IsLoginAvailableCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.IsLoginAvailableCompleted(this, new IsLoginAvailableCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void IsLoginAvailableAsync(string login) {
            this.IsLoginAvailableAsync(login, null);
        }
        
        public void IsLoginAvailableAsync(string login, object userState) {
            if ((this.onBeginIsLoginAvailableDelegate == null)) {
                this.onBeginIsLoginAvailableDelegate = new BeginOperationDelegate(this.OnBeginIsLoginAvailable);
            }
            if ((this.onEndIsLoginAvailableDelegate == null)) {
                this.onEndIsLoginAvailableDelegate = new EndOperationDelegate(this.OnEndIsLoginAvailable);
            }
            if ((this.onIsLoginAvailableCompletedDelegate == null)) {
                this.onIsLoginAvailableCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnIsLoginAvailableCompleted);
            }
            base.InvokeAsync(this.onBeginIsLoginAvailableDelegate, new object[] {
                        login}, this.onEndIsLoginAvailableDelegate, this.onIsLoginAvailableCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Fab.Client.ApiServiceReference.IUserService.BeginRegister(string login, string password, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRegister(login, password, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Guid Fab.Client.ApiServiceReference.IUserService.EndRegister(System.IAsyncResult result) {
            return base.Channel.EndRegister(result);
        }
        
        private System.IAsyncResult OnBeginRegister(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string login = ((string)(inValues[0]));
            string password = ((string)(inValues[1]));
            return ((Fab.Client.ApiServiceReference.IUserService)(this)).BeginRegister(login, password, callback, asyncState);
        }
        
        private object[] OnEndRegister(System.IAsyncResult result) {
            System.Guid retVal = ((Fab.Client.ApiServiceReference.IUserService)(this)).EndRegister(result);
            return new object[] {
                    retVal};
        }
        
        private void OnRegisterCompleted(object state) {
            if ((this.RegisterCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RegisterCompleted(this, new RegisterCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RegisterAsync(string login, string password) {
            this.RegisterAsync(login, password, null);
        }
        
        public void RegisterAsync(string login, string password, object userState) {
            if ((this.onBeginRegisterDelegate == null)) {
                this.onBeginRegisterDelegate = new BeginOperationDelegate(this.OnBeginRegister);
            }
            if ((this.onEndRegisterDelegate == null)) {
                this.onEndRegisterDelegate = new EndOperationDelegate(this.OnEndRegister);
            }
            if ((this.onRegisterCompletedDelegate == null)) {
                this.onRegisterCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRegisterCompleted);
            }
            base.InvokeAsync(this.onBeginRegisterDelegate, new object[] {
                        login,
                        password}, this.onEndRegisterDelegate, this.onRegisterCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Fab.Client.ApiServiceReference.IUserService.BeginUpdate(System.Guid userId, string oldPassword, string newPassword, string newEmail, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginUpdate(userId, oldPassword, newPassword, newEmail, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void Fab.Client.ApiServiceReference.IUserService.EndUpdate(System.IAsyncResult result) {
            base.Channel.EndUpdate(result);
        }
        
        private System.IAsyncResult OnBeginUpdate(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Guid userId = ((System.Guid)(inValues[0]));
            string oldPassword = ((string)(inValues[1]));
            string newPassword = ((string)(inValues[2]));
            string newEmail = ((string)(inValues[3]));
            return ((Fab.Client.ApiServiceReference.IUserService)(this)).BeginUpdate(userId, oldPassword, newPassword, newEmail, callback, asyncState);
        }
        
        private object[] OnEndUpdate(System.IAsyncResult result) {
            ((Fab.Client.ApiServiceReference.IUserService)(this)).EndUpdate(result);
            return null;
        }
        
        private void OnUpdateCompleted(object state) {
            if ((this.UpdateCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.UpdateCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void UpdateAsync(System.Guid userId, string oldPassword, string newPassword, string newEmail) {
            this.UpdateAsync(userId, oldPassword, newPassword, newEmail, null);
        }
        
        public void UpdateAsync(System.Guid userId, string oldPassword, string newPassword, string newEmail, object userState) {
            if ((this.onBeginUpdateDelegate == null)) {
                this.onBeginUpdateDelegate = new BeginOperationDelegate(this.OnBeginUpdate);
            }
            if ((this.onEndUpdateDelegate == null)) {
                this.onEndUpdateDelegate = new EndOperationDelegate(this.OnEndUpdate);
            }
            if ((this.onUpdateCompletedDelegate == null)) {
                this.onUpdateCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUpdateCompleted);
            }
            base.InvokeAsync(this.onBeginUpdateDelegate, new object[] {
                        userId,
                        oldPassword,
                        newPassword,
                        newEmail}, this.onEndUpdateDelegate, this.onUpdateCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Fab.Client.ApiServiceReference.IUserService.BeginGetUserId(string login, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetUserId(login, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Guid Fab.Client.ApiServiceReference.IUserService.EndGetUserId(System.IAsyncResult result) {
            return base.Channel.EndGetUserId(result);
        }
        
        private System.IAsyncResult OnBeginGetUserId(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string login = ((string)(inValues[0]));
            return ((Fab.Client.ApiServiceReference.IUserService)(this)).BeginGetUserId(login, callback, asyncState);
        }
        
        private object[] OnEndGetUserId(System.IAsyncResult result) {
            System.Guid retVal = ((Fab.Client.ApiServiceReference.IUserService)(this)).EndGetUserId(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetUserIdCompleted(object state) {
            if ((this.GetUserIdCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetUserIdCompleted(this, new GetUserIdCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetUserIdAsync(string login) {
            this.GetUserIdAsync(login, null);
        }
        
        public void GetUserIdAsync(string login, object userState) {
            if ((this.onBeginGetUserIdDelegate == null)) {
                this.onBeginGetUserIdDelegate = new BeginOperationDelegate(this.OnBeginGetUserId);
            }
            if ((this.onEndGetUserIdDelegate == null)) {
                this.onEndGetUserIdDelegate = new EndOperationDelegate(this.OnEndGetUserId);
            }
            if ((this.onGetUserIdCompletedDelegate == null)) {
                this.onGetUserIdCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetUserIdCompleted);
            }
            base.InvokeAsync(this.onBeginGetUserIdDelegate, new object[] {
                        login}, this.onEndGetUserIdDelegate, this.onGetUserIdCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Fab.Client.ApiServiceReference.IUserService.BeginResetPassword(string login, string email, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginResetPassword(login, email, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void Fab.Client.ApiServiceReference.IUserService.EndResetPassword(System.IAsyncResult result) {
            base.Channel.EndResetPassword(result);
        }
        
        private System.IAsyncResult OnBeginResetPassword(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string login = ((string)(inValues[0]));
            string email = ((string)(inValues[1]));
            return ((Fab.Client.ApiServiceReference.IUserService)(this)).BeginResetPassword(login, email, callback, asyncState);
        }
        
        private object[] OnEndResetPassword(System.IAsyncResult result) {
            ((Fab.Client.ApiServiceReference.IUserService)(this)).EndResetPassword(result);
            return null;
        }
        
        private void OnResetPasswordCompleted(object state) {
            if ((this.ResetPasswordCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ResetPasswordCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ResetPasswordAsync(string login, string email) {
            this.ResetPasswordAsync(login, email, null);
        }
        
        public void ResetPasswordAsync(string login, string email, object userState) {
            if ((this.onBeginResetPasswordDelegate == null)) {
                this.onBeginResetPasswordDelegate = new BeginOperationDelegate(this.OnBeginResetPassword);
            }
            if ((this.onEndResetPasswordDelegate == null)) {
                this.onEndResetPasswordDelegate = new EndOperationDelegate(this.OnEndResetPassword);
            }
            if ((this.onResetPasswordCompletedDelegate == null)) {
                this.onResetPasswordCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnResetPasswordCompleted);
            }
            base.InvokeAsync(this.onBeginResetPasswordDelegate, new object[] {
                        login,
                        email}, this.onEndResetPasswordDelegate, this.onResetPasswordCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override Fab.Client.ApiServiceReference.IUserService CreateChannel() {
            return new UserServiceClientChannel(this);
        }
        
        private class UserServiceClientChannel : ChannelBase<Fab.Client.ApiServiceReference.IUserService>, Fab.Client.ApiServiceReference.IUserService {
            
            public UserServiceClientChannel(System.ServiceModel.ClientBase<Fab.Client.ApiServiceReference.IUserService> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginGenerateUniqueLogin(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("GenerateUniqueLogin", _args, callback, asyncState);
                return _result;
            }
            
            public string EndGenerateUniqueLogin(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("GenerateUniqueLogin", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginIsLoginAvailable(string login, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = login;
                System.IAsyncResult _result = base.BeginInvoke("IsLoginAvailable", _args, callback, asyncState);
                return _result;
            }
            
            public bool EndIsLoginAvailable(System.IAsyncResult result) {
                object[] _args = new object[0];
                bool _result = ((bool)(base.EndInvoke("IsLoginAvailable", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginRegister(string login, string password, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = login;
                _args[1] = password;
                System.IAsyncResult _result = base.BeginInvoke("Register", _args, callback, asyncState);
                return _result;
            }
            
            public System.Guid EndRegister(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Guid _result = ((System.Guid)(base.EndInvoke("Register", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginUpdate(System.Guid userId, string oldPassword, string newPassword, string newEmail, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[4];
                _args[0] = userId;
                _args[1] = oldPassword;
                _args[2] = newPassword;
                _args[3] = newEmail;
                System.IAsyncResult _result = base.BeginInvoke("Update", _args, callback, asyncState);
                return _result;
            }
            
            public void EndUpdate(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("Update", _args, result);
            }
            
            public System.IAsyncResult BeginGetUserId(string login, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = login;
                System.IAsyncResult _result = base.BeginInvoke("GetUserId", _args, callback, asyncState);
                return _result;
            }
            
            public System.Guid EndGetUserId(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Guid _result = ((System.Guid)(base.EndInvoke("GetUserId", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginResetPassword(string login, string email, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = login;
                _args[1] = email;
                System.IAsyncResult _result = base.BeginInvoke("ResetPassword", _args, callback, asyncState);
                return _result;
            }
            
            public void EndResetPassword(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("ResetPassword", _args, result);
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ApiServiceReference.IAccountService")]
    public interface IAccountService {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IAccountService/CreateAccount", ReplyAction="http://tempuri.org/IAccountService/CreateAccountResponse")]
        System.IAsyncResult BeginCreateAccount(System.Guid userId, string name, int assetTypeId, System.AsyncCallback callback, object asyncState);
        
        void EndCreateAccount(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IAccountService/UpdateAccount", ReplyAction="http://tempuri.org/IAccountService/UpdateAccountResponse")]
        System.IAsyncResult BeginUpdateAccount(System.Guid userId, int accountId, string name, int assetTypeId, System.AsyncCallback callback, object asyncState);
        
        void EndUpdateAccount(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IAccountService/DeleteAccount", ReplyAction="http://tempuri.org/IAccountService/DeleteAccountResponse")]
        System.IAsyncResult BeginDeleteAccount(System.Guid userId, int accountId, System.AsyncCallback callback, object asyncState);
        
        void EndDeleteAccount(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IAccountService/GetAllAccounts", ReplyAction="http://tempuri.org/IAccountService/GetAllAccountsResponse")]
        System.IAsyncResult BeginGetAllAccounts(System.Guid userId, System.AsyncCallback callback, object asyncState);
        
        Fab.Client.ApiServiceReference.Account[] EndGetAllAccounts(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IAccountServiceChannel : Fab.Client.ApiServiceReference.IAccountService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetAllAccountsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetAllAccountsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Fab.Client.ApiServiceReference.Account[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Fab.Client.ApiServiceReference.Account[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AccountServiceClient : System.ServiceModel.ClientBase<Fab.Client.ApiServiceReference.IAccountService>, Fab.Client.ApiServiceReference.IAccountService {
        
        private BeginOperationDelegate onBeginCreateAccountDelegate;
        
        private EndOperationDelegate onEndCreateAccountDelegate;
        
        private System.Threading.SendOrPostCallback onCreateAccountCompletedDelegate;
        
        private BeginOperationDelegate onBeginUpdateAccountDelegate;
        
        private EndOperationDelegate onEndUpdateAccountDelegate;
        
        private System.Threading.SendOrPostCallback onUpdateAccountCompletedDelegate;
        
        private BeginOperationDelegate onBeginDeleteAccountDelegate;
        
        private EndOperationDelegate onEndDeleteAccountDelegate;
        
        private System.Threading.SendOrPostCallback onDeleteAccountCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetAllAccountsDelegate;
        
        private EndOperationDelegate onEndGetAllAccountsDelegate;
        
        private System.Threading.SendOrPostCallback onGetAllAccountsCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public AccountServiceClient() {
        }
        
        public AccountServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public AccountServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public AccountServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public AccountServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                            "ookieContainerBindingElement.");
                }
            }
        }
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CreateAccountCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> UpdateAccountCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> DeleteAccountCompleted;
        
        public event System.EventHandler<GetAllAccountsCompletedEventArgs> GetAllAccountsCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Fab.Client.ApiServiceReference.IAccountService.BeginCreateAccount(System.Guid userId, string name, int assetTypeId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginCreateAccount(userId, name, assetTypeId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void Fab.Client.ApiServiceReference.IAccountService.EndCreateAccount(System.IAsyncResult result) {
            base.Channel.EndCreateAccount(result);
        }
        
        private System.IAsyncResult OnBeginCreateAccount(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Guid userId = ((System.Guid)(inValues[0]));
            string name = ((string)(inValues[1]));
            int assetTypeId = ((int)(inValues[2]));
            return ((Fab.Client.ApiServiceReference.IAccountService)(this)).BeginCreateAccount(userId, name, assetTypeId, callback, asyncState);
        }
        
        private object[] OnEndCreateAccount(System.IAsyncResult result) {
            ((Fab.Client.ApiServiceReference.IAccountService)(this)).EndCreateAccount(result);
            return null;
        }
        
        private void OnCreateAccountCompleted(object state) {
            if ((this.CreateAccountCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CreateAccountCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CreateAccountAsync(System.Guid userId, string name, int assetTypeId) {
            this.CreateAccountAsync(userId, name, assetTypeId, null);
        }
        
        public void CreateAccountAsync(System.Guid userId, string name, int assetTypeId, object userState) {
            if ((this.onBeginCreateAccountDelegate == null)) {
                this.onBeginCreateAccountDelegate = new BeginOperationDelegate(this.OnBeginCreateAccount);
            }
            if ((this.onEndCreateAccountDelegate == null)) {
                this.onEndCreateAccountDelegate = new EndOperationDelegate(this.OnEndCreateAccount);
            }
            if ((this.onCreateAccountCompletedDelegate == null)) {
                this.onCreateAccountCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCreateAccountCompleted);
            }
            base.InvokeAsync(this.onBeginCreateAccountDelegate, new object[] {
                        userId,
                        name,
                        assetTypeId}, this.onEndCreateAccountDelegate, this.onCreateAccountCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Fab.Client.ApiServiceReference.IAccountService.BeginUpdateAccount(System.Guid userId, int accountId, string name, int assetTypeId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginUpdateAccount(userId, accountId, name, assetTypeId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void Fab.Client.ApiServiceReference.IAccountService.EndUpdateAccount(System.IAsyncResult result) {
            base.Channel.EndUpdateAccount(result);
        }
        
        private System.IAsyncResult OnBeginUpdateAccount(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Guid userId = ((System.Guid)(inValues[0]));
            int accountId = ((int)(inValues[1]));
            string name = ((string)(inValues[2]));
            int assetTypeId = ((int)(inValues[3]));
            return ((Fab.Client.ApiServiceReference.IAccountService)(this)).BeginUpdateAccount(userId, accountId, name, assetTypeId, callback, asyncState);
        }
        
        private object[] OnEndUpdateAccount(System.IAsyncResult result) {
            ((Fab.Client.ApiServiceReference.IAccountService)(this)).EndUpdateAccount(result);
            return null;
        }
        
        private void OnUpdateAccountCompleted(object state) {
            if ((this.UpdateAccountCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.UpdateAccountCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void UpdateAccountAsync(System.Guid userId, int accountId, string name, int assetTypeId) {
            this.UpdateAccountAsync(userId, accountId, name, assetTypeId, null);
        }
        
        public void UpdateAccountAsync(System.Guid userId, int accountId, string name, int assetTypeId, object userState) {
            if ((this.onBeginUpdateAccountDelegate == null)) {
                this.onBeginUpdateAccountDelegate = new BeginOperationDelegate(this.OnBeginUpdateAccount);
            }
            if ((this.onEndUpdateAccountDelegate == null)) {
                this.onEndUpdateAccountDelegate = new EndOperationDelegate(this.OnEndUpdateAccount);
            }
            if ((this.onUpdateAccountCompletedDelegate == null)) {
                this.onUpdateAccountCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUpdateAccountCompleted);
            }
            base.InvokeAsync(this.onBeginUpdateAccountDelegate, new object[] {
                        userId,
                        accountId,
                        name,
                        assetTypeId}, this.onEndUpdateAccountDelegate, this.onUpdateAccountCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Fab.Client.ApiServiceReference.IAccountService.BeginDeleteAccount(System.Guid userId, int accountId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDeleteAccount(userId, accountId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void Fab.Client.ApiServiceReference.IAccountService.EndDeleteAccount(System.IAsyncResult result) {
            base.Channel.EndDeleteAccount(result);
        }
        
        private System.IAsyncResult OnBeginDeleteAccount(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Guid userId = ((System.Guid)(inValues[0]));
            int accountId = ((int)(inValues[1]));
            return ((Fab.Client.ApiServiceReference.IAccountService)(this)).BeginDeleteAccount(userId, accountId, callback, asyncState);
        }
        
        private object[] OnEndDeleteAccount(System.IAsyncResult result) {
            ((Fab.Client.ApiServiceReference.IAccountService)(this)).EndDeleteAccount(result);
            return null;
        }
        
        private void OnDeleteAccountCompleted(object state) {
            if ((this.DeleteAccountCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DeleteAccountCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DeleteAccountAsync(System.Guid userId, int accountId) {
            this.DeleteAccountAsync(userId, accountId, null);
        }
        
        public void DeleteAccountAsync(System.Guid userId, int accountId, object userState) {
            if ((this.onBeginDeleteAccountDelegate == null)) {
                this.onBeginDeleteAccountDelegate = new BeginOperationDelegate(this.OnBeginDeleteAccount);
            }
            if ((this.onEndDeleteAccountDelegate == null)) {
                this.onEndDeleteAccountDelegate = new EndOperationDelegate(this.OnEndDeleteAccount);
            }
            if ((this.onDeleteAccountCompletedDelegate == null)) {
                this.onDeleteAccountCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDeleteAccountCompleted);
            }
            base.InvokeAsync(this.onBeginDeleteAccountDelegate, new object[] {
                        userId,
                        accountId}, this.onEndDeleteAccountDelegate, this.onDeleteAccountCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Fab.Client.ApiServiceReference.IAccountService.BeginGetAllAccounts(System.Guid userId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetAllAccounts(userId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Fab.Client.ApiServiceReference.Account[] Fab.Client.ApiServiceReference.IAccountService.EndGetAllAccounts(System.IAsyncResult result) {
            return base.Channel.EndGetAllAccounts(result);
        }
        
        private System.IAsyncResult OnBeginGetAllAccounts(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Guid userId = ((System.Guid)(inValues[0]));
            return ((Fab.Client.ApiServiceReference.IAccountService)(this)).BeginGetAllAccounts(userId, callback, asyncState);
        }
        
        private object[] OnEndGetAllAccounts(System.IAsyncResult result) {
            Fab.Client.ApiServiceReference.Account[] retVal = ((Fab.Client.ApiServiceReference.IAccountService)(this)).EndGetAllAccounts(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetAllAccountsCompleted(object state) {
            if ((this.GetAllAccountsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetAllAccountsCompleted(this, new GetAllAccountsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetAllAccountsAsync(System.Guid userId) {
            this.GetAllAccountsAsync(userId, null);
        }
        
        public void GetAllAccountsAsync(System.Guid userId, object userState) {
            if ((this.onBeginGetAllAccountsDelegate == null)) {
                this.onBeginGetAllAccountsDelegate = new BeginOperationDelegate(this.OnBeginGetAllAccounts);
            }
            if ((this.onEndGetAllAccountsDelegate == null)) {
                this.onEndGetAllAccountsDelegate = new EndOperationDelegate(this.OnEndGetAllAccounts);
            }
            if ((this.onGetAllAccountsCompletedDelegate == null)) {
                this.onGetAllAccountsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetAllAccountsCompleted);
            }
            base.InvokeAsync(this.onBeginGetAllAccountsDelegate, new object[] {
                        userId}, this.onEndGetAllAccountsDelegate, this.onGetAllAccountsCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override Fab.Client.ApiServiceReference.IAccountService CreateChannel() {
            return new AccountServiceClientChannel(this);
        }
        
        private class AccountServiceClientChannel : ChannelBase<Fab.Client.ApiServiceReference.IAccountService>, Fab.Client.ApiServiceReference.IAccountService {
            
            public AccountServiceClientChannel(System.ServiceModel.ClientBase<Fab.Client.ApiServiceReference.IAccountService> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginCreateAccount(System.Guid userId, string name, int assetTypeId, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = userId;
                _args[1] = name;
                _args[2] = assetTypeId;
                System.IAsyncResult _result = base.BeginInvoke("CreateAccount", _args, callback, asyncState);
                return _result;
            }
            
            public void EndCreateAccount(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("CreateAccount", _args, result);
            }
            
            public System.IAsyncResult BeginUpdateAccount(System.Guid userId, int accountId, string name, int assetTypeId, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[4];
                _args[0] = userId;
                _args[1] = accountId;
                _args[2] = name;
                _args[3] = assetTypeId;
                System.IAsyncResult _result = base.BeginInvoke("UpdateAccount", _args, callback, asyncState);
                return _result;
            }
            
            public void EndUpdateAccount(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("UpdateAccount", _args, result);
            }
            
            public System.IAsyncResult BeginDeleteAccount(System.Guid userId, int accountId, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = userId;
                _args[1] = accountId;
                System.IAsyncResult _result = base.BeginInvoke("DeleteAccount", _args, callback, asyncState);
                return _result;
            }
            
            public void EndDeleteAccount(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("DeleteAccount", _args, result);
            }
            
            public System.IAsyncResult BeginGetAllAccounts(System.Guid userId, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = userId;
                System.IAsyncResult _result = base.BeginInvoke("GetAllAccounts", _args, callback, asyncState);
                return _result;
            }
            
            public Fab.Client.ApiServiceReference.Account[] EndGetAllAccounts(System.IAsyncResult result) {
                object[] _args = new object[0];
                Fab.Client.ApiServiceReference.Account[] _result = ((Fab.Client.ApiServiceReference.Account[])(base.EndInvoke("GetAllAccounts", _args, result)));
                return _result;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ApiServiceReference.ICategoryService")]
    public interface ICategoryService {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ICategoryService/CreateCategory", ReplyAction="http://tempuri.org/ICategoryService/CreateCategoryResponse")]
        System.IAsyncResult BeginCreateCategory(System.Guid userId, string name, System.AsyncCallback callback, object asyncState);
        
        void EndCreateCategory(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ICategoryService/UpdateCategory", ReplyAction="http://tempuri.org/ICategoryService/UpdateCategoryResponse")]
        System.IAsyncResult BeginUpdateCategory(System.Guid userId, int categoryId, string name, System.AsyncCallback callback, object asyncState);
        
        void EndUpdateCategory(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ICategoryService/DeleteCategory", ReplyAction="http://tempuri.org/ICategoryService/DeleteCategoryResponse")]
        System.IAsyncResult BeginDeleteCategory(System.Guid userId, int categoryId, System.AsyncCallback callback, object asyncState);
        
        void EndDeleteCategory(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ICategoryService/GetAllCategories", ReplyAction="http://tempuri.org/ICategoryService/GetAllCategoriesResponse")]
        System.IAsyncResult BeginGetAllCategories(System.Guid userId, System.AsyncCallback callback, object asyncState);
        
        Fab.Client.ApiServiceReference.Category[] EndGetAllCategories(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ICategoryServiceChannel : Fab.Client.ApiServiceReference.ICategoryService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetAllCategoriesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetAllCategoriesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Fab.Client.ApiServiceReference.Category[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Fab.Client.ApiServiceReference.Category[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CategoryServiceClient : System.ServiceModel.ClientBase<Fab.Client.ApiServiceReference.ICategoryService>, Fab.Client.ApiServiceReference.ICategoryService {
        
        private BeginOperationDelegate onBeginCreateCategoryDelegate;
        
        private EndOperationDelegate onEndCreateCategoryDelegate;
        
        private System.Threading.SendOrPostCallback onCreateCategoryCompletedDelegate;
        
        private BeginOperationDelegate onBeginUpdateCategoryDelegate;
        
        private EndOperationDelegate onEndUpdateCategoryDelegate;
        
        private System.Threading.SendOrPostCallback onUpdateCategoryCompletedDelegate;
        
        private BeginOperationDelegate onBeginDeleteCategoryDelegate;
        
        private EndOperationDelegate onEndDeleteCategoryDelegate;
        
        private System.Threading.SendOrPostCallback onDeleteCategoryCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetAllCategoriesDelegate;
        
        private EndOperationDelegate onEndGetAllCategoriesDelegate;
        
        private System.Threading.SendOrPostCallback onGetAllCategoriesCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public CategoryServiceClient() {
        }
        
        public CategoryServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public CategoryServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CategoryServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CategoryServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                            "ookieContainerBindingElement.");
                }
            }
        }
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CreateCategoryCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> UpdateCategoryCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> DeleteCategoryCompleted;
        
        public event System.EventHandler<GetAllCategoriesCompletedEventArgs> GetAllCategoriesCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Fab.Client.ApiServiceReference.ICategoryService.BeginCreateCategory(System.Guid userId, string name, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginCreateCategory(userId, name, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void Fab.Client.ApiServiceReference.ICategoryService.EndCreateCategory(System.IAsyncResult result) {
            base.Channel.EndCreateCategory(result);
        }
        
        private System.IAsyncResult OnBeginCreateCategory(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Guid userId = ((System.Guid)(inValues[0]));
            string name = ((string)(inValues[1]));
            return ((Fab.Client.ApiServiceReference.ICategoryService)(this)).BeginCreateCategory(userId, name, callback, asyncState);
        }
        
        private object[] OnEndCreateCategory(System.IAsyncResult result) {
            ((Fab.Client.ApiServiceReference.ICategoryService)(this)).EndCreateCategory(result);
            return null;
        }
        
        private void OnCreateCategoryCompleted(object state) {
            if ((this.CreateCategoryCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CreateCategoryCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CreateCategoryAsync(System.Guid userId, string name) {
            this.CreateCategoryAsync(userId, name, null);
        }
        
        public void CreateCategoryAsync(System.Guid userId, string name, object userState) {
            if ((this.onBeginCreateCategoryDelegate == null)) {
                this.onBeginCreateCategoryDelegate = new BeginOperationDelegate(this.OnBeginCreateCategory);
            }
            if ((this.onEndCreateCategoryDelegate == null)) {
                this.onEndCreateCategoryDelegate = new EndOperationDelegate(this.OnEndCreateCategory);
            }
            if ((this.onCreateCategoryCompletedDelegate == null)) {
                this.onCreateCategoryCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCreateCategoryCompleted);
            }
            base.InvokeAsync(this.onBeginCreateCategoryDelegate, new object[] {
                        userId,
                        name}, this.onEndCreateCategoryDelegate, this.onCreateCategoryCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Fab.Client.ApiServiceReference.ICategoryService.BeginUpdateCategory(System.Guid userId, int categoryId, string name, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginUpdateCategory(userId, categoryId, name, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void Fab.Client.ApiServiceReference.ICategoryService.EndUpdateCategory(System.IAsyncResult result) {
            base.Channel.EndUpdateCategory(result);
        }
        
        private System.IAsyncResult OnBeginUpdateCategory(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Guid userId = ((System.Guid)(inValues[0]));
            int categoryId = ((int)(inValues[1]));
            string name = ((string)(inValues[2]));
            return ((Fab.Client.ApiServiceReference.ICategoryService)(this)).BeginUpdateCategory(userId, categoryId, name, callback, asyncState);
        }
        
        private object[] OnEndUpdateCategory(System.IAsyncResult result) {
            ((Fab.Client.ApiServiceReference.ICategoryService)(this)).EndUpdateCategory(result);
            return null;
        }
        
        private void OnUpdateCategoryCompleted(object state) {
            if ((this.UpdateCategoryCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.UpdateCategoryCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void UpdateCategoryAsync(System.Guid userId, int categoryId, string name) {
            this.UpdateCategoryAsync(userId, categoryId, name, null);
        }
        
        public void UpdateCategoryAsync(System.Guid userId, int categoryId, string name, object userState) {
            if ((this.onBeginUpdateCategoryDelegate == null)) {
                this.onBeginUpdateCategoryDelegate = new BeginOperationDelegate(this.OnBeginUpdateCategory);
            }
            if ((this.onEndUpdateCategoryDelegate == null)) {
                this.onEndUpdateCategoryDelegate = new EndOperationDelegate(this.OnEndUpdateCategory);
            }
            if ((this.onUpdateCategoryCompletedDelegate == null)) {
                this.onUpdateCategoryCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUpdateCategoryCompleted);
            }
            base.InvokeAsync(this.onBeginUpdateCategoryDelegate, new object[] {
                        userId,
                        categoryId,
                        name}, this.onEndUpdateCategoryDelegate, this.onUpdateCategoryCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Fab.Client.ApiServiceReference.ICategoryService.BeginDeleteCategory(System.Guid userId, int categoryId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDeleteCategory(userId, categoryId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void Fab.Client.ApiServiceReference.ICategoryService.EndDeleteCategory(System.IAsyncResult result) {
            base.Channel.EndDeleteCategory(result);
        }
        
        private System.IAsyncResult OnBeginDeleteCategory(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Guid userId = ((System.Guid)(inValues[0]));
            int categoryId = ((int)(inValues[1]));
            return ((Fab.Client.ApiServiceReference.ICategoryService)(this)).BeginDeleteCategory(userId, categoryId, callback, asyncState);
        }
        
        private object[] OnEndDeleteCategory(System.IAsyncResult result) {
            ((Fab.Client.ApiServiceReference.ICategoryService)(this)).EndDeleteCategory(result);
            return null;
        }
        
        private void OnDeleteCategoryCompleted(object state) {
            if ((this.DeleteCategoryCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DeleteCategoryCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DeleteCategoryAsync(System.Guid userId, int categoryId) {
            this.DeleteCategoryAsync(userId, categoryId, null);
        }
        
        public void DeleteCategoryAsync(System.Guid userId, int categoryId, object userState) {
            if ((this.onBeginDeleteCategoryDelegate == null)) {
                this.onBeginDeleteCategoryDelegate = new BeginOperationDelegate(this.OnBeginDeleteCategory);
            }
            if ((this.onEndDeleteCategoryDelegate == null)) {
                this.onEndDeleteCategoryDelegate = new EndOperationDelegate(this.OnEndDeleteCategory);
            }
            if ((this.onDeleteCategoryCompletedDelegate == null)) {
                this.onDeleteCategoryCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDeleteCategoryCompleted);
            }
            base.InvokeAsync(this.onBeginDeleteCategoryDelegate, new object[] {
                        userId,
                        categoryId}, this.onEndDeleteCategoryDelegate, this.onDeleteCategoryCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Fab.Client.ApiServiceReference.ICategoryService.BeginGetAllCategories(System.Guid userId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetAllCategories(userId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Fab.Client.ApiServiceReference.Category[] Fab.Client.ApiServiceReference.ICategoryService.EndGetAllCategories(System.IAsyncResult result) {
            return base.Channel.EndGetAllCategories(result);
        }
        
        private System.IAsyncResult OnBeginGetAllCategories(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Guid userId = ((System.Guid)(inValues[0]));
            return ((Fab.Client.ApiServiceReference.ICategoryService)(this)).BeginGetAllCategories(userId, callback, asyncState);
        }
        
        private object[] OnEndGetAllCategories(System.IAsyncResult result) {
            Fab.Client.ApiServiceReference.Category[] retVal = ((Fab.Client.ApiServiceReference.ICategoryService)(this)).EndGetAllCategories(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetAllCategoriesCompleted(object state) {
            if ((this.GetAllCategoriesCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetAllCategoriesCompleted(this, new GetAllCategoriesCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetAllCategoriesAsync(System.Guid userId) {
            this.GetAllCategoriesAsync(userId, null);
        }
        
        public void GetAllCategoriesAsync(System.Guid userId, object userState) {
            if ((this.onBeginGetAllCategoriesDelegate == null)) {
                this.onBeginGetAllCategoriesDelegate = new BeginOperationDelegate(this.OnBeginGetAllCategories);
            }
            if ((this.onEndGetAllCategoriesDelegate == null)) {
                this.onEndGetAllCategoriesDelegate = new EndOperationDelegate(this.OnEndGetAllCategories);
            }
            if ((this.onGetAllCategoriesCompletedDelegate == null)) {
                this.onGetAllCategoriesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetAllCategoriesCompleted);
            }
            base.InvokeAsync(this.onBeginGetAllCategoriesDelegate, new object[] {
                        userId}, this.onEndGetAllCategoriesDelegate, this.onGetAllCategoriesCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override Fab.Client.ApiServiceReference.ICategoryService CreateChannel() {
            return new CategoryServiceClientChannel(this);
        }
        
        private class CategoryServiceClientChannel : ChannelBase<Fab.Client.ApiServiceReference.ICategoryService>, Fab.Client.ApiServiceReference.ICategoryService {
            
            public CategoryServiceClientChannel(System.ServiceModel.ClientBase<Fab.Client.ApiServiceReference.ICategoryService> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginCreateCategory(System.Guid userId, string name, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = userId;
                _args[1] = name;
                System.IAsyncResult _result = base.BeginInvoke("CreateCategory", _args, callback, asyncState);
                return _result;
            }
            
            public void EndCreateCategory(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("CreateCategory", _args, result);
            }
            
            public System.IAsyncResult BeginUpdateCategory(System.Guid userId, int categoryId, string name, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = userId;
                _args[1] = categoryId;
                _args[2] = name;
                System.IAsyncResult _result = base.BeginInvoke("UpdateCategory", _args, callback, asyncState);
                return _result;
            }
            
            public void EndUpdateCategory(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("UpdateCategory", _args, result);
            }
            
            public System.IAsyncResult BeginDeleteCategory(System.Guid userId, int categoryId, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = userId;
                _args[1] = categoryId;
                System.IAsyncResult _result = base.BeginInvoke("DeleteCategory", _args, callback, asyncState);
                return _result;
            }
            
            public void EndDeleteCategory(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("DeleteCategory", _args, result);
            }
            
            public System.IAsyncResult BeginGetAllCategories(System.Guid userId, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = userId;
                System.IAsyncResult _result = base.BeginInvoke("GetAllCategories", _args, callback, asyncState);
                return _result;
            }
            
            public Fab.Client.ApiServiceReference.Category[] EndGetAllCategories(System.IAsyncResult result) {
                object[] _args = new object[0];
                Fab.Client.ApiServiceReference.Category[] _result = ((Fab.Client.ApiServiceReference.Category[])(base.EndInvoke("GetAllCategories", _args, result)));
                return _result;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ApiServiceReference.ITransactionService")]
    public interface ITransactionService {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ITransactionService/GetAllAssetTypes", ReplyAction="http://tempuri.org/ITransactionService/GetAllAssetTypesResponse")]
        System.IAsyncResult BeginGetAllAssetTypes(System.AsyncCallback callback, object asyncState);
        
        Fab.Client.ApiServiceReference.AssetType[] EndGetAllAssetTypes(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ITransactionService/GetAllJournalTypes", ReplyAction="http://tempuri.org/ITransactionService/GetAllJournalTypesResponse")]
        System.IAsyncResult BeginGetAllJournalTypes(System.AsyncCallback callback, object asyncState);
        
        Fab.Client.ApiServiceReference.JournalType[] EndGetAllJournalTypes(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ITransactionService/Deposit", ReplyAction="http://tempuri.org/ITransactionService/DepositResponse")]
        System.IAsyncResult BeginDeposit(System.Guid userId, int accountId, System.DateTime operationDate, decimal price, decimal quantity, string comment, System.Nullable<int> categoryId, System.AsyncCallback callback, object asyncState);
        
        void EndDeposit(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ITransactionService/Withdrawal", ReplyAction="http://tempuri.org/ITransactionService/WithdrawalResponse")]
        System.IAsyncResult BeginWithdrawal(System.Guid userId, int accountId, System.DateTime operationDate, decimal price, decimal quantity, string comment, System.Nullable<int> categoryId, System.AsyncCallback callback, object asyncState);
        
        void EndWithdrawal(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ITransactionService/Transfer", ReplyAction="http://tempuri.org/ITransactionService/TransferResponse")]
        System.IAsyncResult BeginTransfer(System.Guid user1Id, int account1Id, System.Guid user2Id, int account2Id, System.DateTime operationDate, decimal amount, string comment, System.AsyncCallback callback, object asyncState);
        
        void EndTransfer(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ITransactionService/GetAccountBalance", ReplyAction="http://tempuri.org/ITransactionService/GetAccountBalanceResponse")]
        System.IAsyncResult BeginGetAccountBalance(System.Guid userId, int accountId, System.AsyncCallback callback, object asyncState);
        
        decimal EndGetAccountBalance(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ITransactionService/GetAllTransactions", ReplyAction="http://tempuri.org/ITransactionService/GetAllTransactionsResponse")]
        System.IAsyncResult BeginGetAllTransactions(System.Guid userId, int accountId, System.AsyncCallback callback, object asyncState);
        
        Fab.Client.ApiServiceReference.TransactionRecord[] EndGetAllTransactions(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ITransactionService/DeleteTransaction", ReplyAction="http://tempuri.org/ITransactionService/DeleteTransactionResponse")]
        System.IAsyncResult BeginDeleteTransaction(System.Guid userId, int accountId, int transactionId, System.AsyncCallback callback, object asyncState);
        
        void EndDeleteTransaction(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ITransactionServiceChannel : Fab.Client.ApiServiceReference.ITransactionService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetAllAssetTypesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetAllAssetTypesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Fab.Client.ApiServiceReference.AssetType[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Fab.Client.ApiServiceReference.AssetType[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetAllJournalTypesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetAllJournalTypesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Fab.Client.ApiServiceReference.JournalType[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Fab.Client.ApiServiceReference.JournalType[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetAccountBalanceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetAccountBalanceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public decimal Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((decimal)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetAllTransactionsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetAllTransactionsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Fab.Client.ApiServiceReference.TransactionRecord[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Fab.Client.ApiServiceReference.TransactionRecord[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TransactionServiceClient : System.ServiceModel.ClientBase<Fab.Client.ApiServiceReference.ITransactionService>, Fab.Client.ApiServiceReference.ITransactionService {
        
        private BeginOperationDelegate onBeginGetAllAssetTypesDelegate;
        
        private EndOperationDelegate onEndGetAllAssetTypesDelegate;
        
        private System.Threading.SendOrPostCallback onGetAllAssetTypesCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetAllJournalTypesDelegate;
        
        private EndOperationDelegate onEndGetAllJournalTypesDelegate;
        
        private System.Threading.SendOrPostCallback onGetAllJournalTypesCompletedDelegate;
        
        private BeginOperationDelegate onBeginDepositDelegate;
        
        private EndOperationDelegate onEndDepositDelegate;
        
        private System.Threading.SendOrPostCallback onDepositCompletedDelegate;
        
        private BeginOperationDelegate onBeginWithdrawalDelegate;
        
        private EndOperationDelegate onEndWithdrawalDelegate;
        
        private System.Threading.SendOrPostCallback onWithdrawalCompletedDelegate;
        
        private BeginOperationDelegate onBeginTransferDelegate;
        
        private EndOperationDelegate onEndTransferDelegate;
        
        private System.Threading.SendOrPostCallback onTransferCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetAccountBalanceDelegate;
        
        private EndOperationDelegate onEndGetAccountBalanceDelegate;
        
        private System.Threading.SendOrPostCallback onGetAccountBalanceCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetAllTransactionsDelegate;
        
        private EndOperationDelegate onEndGetAllTransactionsDelegate;
        
        private System.Threading.SendOrPostCallback onGetAllTransactionsCompletedDelegate;
        
        private BeginOperationDelegate onBeginDeleteTransactionDelegate;
        
        private EndOperationDelegate onEndDeleteTransactionDelegate;
        
        private System.Threading.SendOrPostCallback onDeleteTransactionCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public TransactionServiceClient() {
        }
        
        public TransactionServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public TransactionServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public TransactionServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public TransactionServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                            "ookieContainerBindingElement.");
                }
            }
        }
        
        public event System.EventHandler<GetAllAssetTypesCompletedEventArgs> GetAllAssetTypesCompleted;
        
        public event System.EventHandler<GetAllJournalTypesCompletedEventArgs> GetAllJournalTypesCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> DepositCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> WithdrawalCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> TransferCompleted;
        
        public event System.EventHandler<GetAccountBalanceCompletedEventArgs> GetAccountBalanceCompleted;
        
        public event System.EventHandler<GetAllTransactionsCompletedEventArgs> GetAllTransactionsCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> DeleteTransactionCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Fab.Client.ApiServiceReference.ITransactionService.BeginGetAllAssetTypes(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetAllAssetTypes(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Fab.Client.ApiServiceReference.AssetType[] Fab.Client.ApiServiceReference.ITransactionService.EndGetAllAssetTypes(System.IAsyncResult result) {
            return base.Channel.EndGetAllAssetTypes(result);
        }
        
        private System.IAsyncResult OnBeginGetAllAssetTypes(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((Fab.Client.ApiServiceReference.ITransactionService)(this)).BeginGetAllAssetTypes(callback, asyncState);
        }
        
        private object[] OnEndGetAllAssetTypes(System.IAsyncResult result) {
            Fab.Client.ApiServiceReference.AssetType[] retVal = ((Fab.Client.ApiServiceReference.ITransactionService)(this)).EndGetAllAssetTypes(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetAllAssetTypesCompleted(object state) {
            if ((this.GetAllAssetTypesCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetAllAssetTypesCompleted(this, new GetAllAssetTypesCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetAllAssetTypesAsync() {
            this.GetAllAssetTypesAsync(null);
        }
        
        public void GetAllAssetTypesAsync(object userState) {
            if ((this.onBeginGetAllAssetTypesDelegate == null)) {
                this.onBeginGetAllAssetTypesDelegate = new BeginOperationDelegate(this.OnBeginGetAllAssetTypes);
            }
            if ((this.onEndGetAllAssetTypesDelegate == null)) {
                this.onEndGetAllAssetTypesDelegate = new EndOperationDelegate(this.OnEndGetAllAssetTypes);
            }
            if ((this.onGetAllAssetTypesCompletedDelegate == null)) {
                this.onGetAllAssetTypesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetAllAssetTypesCompleted);
            }
            base.InvokeAsync(this.onBeginGetAllAssetTypesDelegate, null, this.onEndGetAllAssetTypesDelegate, this.onGetAllAssetTypesCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Fab.Client.ApiServiceReference.ITransactionService.BeginGetAllJournalTypes(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetAllJournalTypes(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Fab.Client.ApiServiceReference.JournalType[] Fab.Client.ApiServiceReference.ITransactionService.EndGetAllJournalTypes(System.IAsyncResult result) {
            return base.Channel.EndGetAllJournalTypes(result);
        }
        
        private System.IAsyncResult OnBeginGetAllJournalTypes(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((Fab.Client.ApiServiceReference.ITransactionService)(this)).BeginGetAllJournalTypes(callback, asyncState);
        }
        
        private object[] OnEndGetAllJournalTypes(System.IAsyncResult result) {
            Fab.Client.ApiServiceReference.JournalType[] retVal = ((Fab.Client.ApiServiceReference.ITransactionService)(this)).EndGetAllJournalTypes(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetAllJournalTypesCompleted(object state) {
            if ((this.GetAllJournalTypesCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetAllJournalTypesCompleted(this, new GetAllJournalTypesCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetAllJournalTypesAsync() {
            this.GetAllJournalTypesAsync(null);
        }
        
        public void GetAllJournalTypesAsync(object userState) {
            if ((this.onBeginGetAllJournalTypesDelegate == null)) {
                this.onBeginGetAllJournalTypesDelegate = new BeginOperationDelegate(this.OnBeginGetAllJournalTypes);
            }
            if ((this.onEndGetAllJournalTypesDelegate == null)) {
                this.onEndGetAllJournalTypesDelegate = new EndOperationDelegate(this.OnEndGetAllJournalTypes);
            }
            if ((this.onGetAllJournalTypesCompletedDelegate == null)) {
                this.onGetAllJournalTypesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetAllJournalTypesCompleted);
            }
            base.InvokeAsync(this.onBeginGetAllJournalTypesDelegate, null, this.onEndGetAllJournalTypesDelegate, this.onGetAllJournalTypesCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Fab.Client.ApiServiceReference.ITransactionService.BeginDeposit(System.Guid userId, int accountId, System.DateTime operationDate, decimal price, decimal quantity, string comment, System.Nullable<int> categoryId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDeposit(userId, accountId, operationDate, price, quantity, comment, categoryId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void Fab.Client.ApiServiceReference.ITransactionService.EndDeposit(System.IAsyncResult result) {
            base.Channel.EndDeposit(result);
        }
        
        private System.IAsyncResult OnBeginDeposit(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Guid userId = ((System.Guid)(inValues[0]));
            int accountId = ((int)(inValues[1]));
            System.DateTime operationDate = ((System.DateTime)(inValues[2]));
            decimal price = ((decimal)(inValues[3]));
            decimal quantity = ((decimal)(inValues[4]));
            string comment = ((string)(inValues[5]));
            System.Nullable<int> categoryId = ((System.Nullable<int>)(inValues[6]));
            return ((Fab.Client.ApiServiceReference.ITransactionService)(this)).BeginDeposit(userId, accountId, operationDate, price, quantity, comment, categoryId, callback, asyncState);
        }
        
        private object[] OnEndDeposit(System.IAsyncResult result) {
            ((Fab.Client.ApiServiceReference.ITransactionService)(this)).EndDeposit(result);
            return null;
        }
        
        private void OnDepositCompleted(object state) {
            if ((this.DepositCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DepositCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DepositAsync(System.Guid userId, int accountId, System.DateTime operationDate, decimal price, decimal quantity, string comment, System.Nullable<int> categoryId) {
            this.DepositAsync(userId, accountId, operationDate, price, quantity, comment, categoryId, null);
        }
        
        public void DepositAsync(System.Guid userId, int accountId, System.DateTime operationDate, decimal price, decimal quantity, string comment, System.Nullable<int> categoryId, object userState) {
            if ((this.onBeginDepositDelegate == null)) {
                this.onBeginDepositDelegate = new BeginOperationDelegate(this.OnBeginDeposit);
            }
            if ((this.onEndDepositDelegate == null)) {
                this.onEndDepositDelegate = new EndOperationDelegate(this.OnEndDeposit);
            }
            if ((this.onDepositCompletedDelegate == null)) {
                this.onDepositCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDepositCompleted);
            }
            base.InvokeAsync(this.onBeginDepositDelegate, new object[] {
                        userId,
                        accountId,
                        operationDate,
                        price,
                        quantity,
                        comment,
                        categoryId}, this.onEndDepositDelegate, this.onDepositCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Fab.Client.ApiServiceReference.ITransactionService.BeginWithdrawal(System.Guid userId, int accountId, System.DateTime operationDate, decimal price, decimal quantity, string comment, System.Nullable<int> categoryId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginWithdrawal(userId, accountId, operationDate, price, quantity, comment, categoryId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void Fab.Client.ApiServiceReference.ITransactionService.EndWithdrawal(System.IAsyncResult result) {
            base.Channel.EndWithdrawal(result);
        }
        
        private System.IAsyncResult OnBeginWithdrawal(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Guid userId = ((System.Guid)(inValues[0]));
            int accountId = ((int)(inValues[1]));
            System.DateTime operationDate = ((System.DateTime)(inValues[2]));
            decimal price = ((decimal)(inValues[3]));
            decimal quantity = ((decimal)(inValues[4]));
            string comment = ((string)(inValues[5]));
            System.Nullable<int> categoryId = ((System.Nullable<int>)(inValues[6]));
            return ((Fab.Client.ApiServiceReference.ITransactionService)(this)).BeginWithdrawal(userId, accountId, operationDate, price, quantity, comment, categoryId, callback, asyncState);
        }
        
        private object[] OnEndWithdrawal(System.IAsyncResult result) {
            ((Fab.Client.ApiServiceReference.ITransactionService)(this)).EndWithdrawal(result);
            return null;
        }
        
        private void OnWithdrawalCompleted(object state) {
            if ((this.WithdrawalCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.WithdrawalCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void WithdrawalAsync(System.Guid userId, int accountId, System.DateTime operationDate, decimal price, decimal quantity, string comment, System.Nullable<int> categoryId) {
            this.WithdrawalAsync(userId, accountId, operationDate, price, quantity, comment, categoryId, null);
        }
        
        public void WithdrawalAsync(System.Guid userId, int accountId, System.DateTime operationDate, decimal price, decimal quantity, string comment, System.Nullable<int> categoryId, object userState) {
            if ((this.onBeginWithdrawalDelegate == null)) {
                this.onBeginWithdrawalDelegate = new BeginOperationDelegate(this.OnBeginWithdrawal);
            }
            if ((this.onEndWithdrawalDelegate == null)) {
                this.onEndWithdrawalDelegate = new EndOperationDelegate(this.OnEndWithdrawal);
            }
            if ((this.onWithdrawalCompletedDelegate == null)) {
                this.onWithdrawalCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnWithdrawalCompleted);
            }
            base.InvokeAsync(this.onBeginWithdrawalDelegate, new object[] {
                        userId,
                        accountId,
                        operationDate,
                        price,
                        quantity,
                        comment,
                        categoryId}, this.onEndWithdrawalDelegate, this.onWithdrawalCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Fab.Client.ApiServiceReference.ITransactionService.BeginTransfer(System.Guid user1Id, int account1Id, System.Guid user2Id, int account2Id, System.DateTime operationDate, decimal amount, string comment, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginTransfer(user1Id, account1Id, user2Id, account2Id, operationDate, amount, comment, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void Fab.Client.ApiServiceReference.ITransactionService.EndTransfer(System.IAsyncResult result) {
            base.Channel.EndTransfer(result);
        }
        
        private System.IAsyncResult OnBeginTransfer(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Guid user1Id = ((System.Guid)(inValues[0]));
            int account1Id = ((int)(inValues[1]));
            System.Guid user2Id = ((System.Guid)(inValues[2]));
            int account2Id = ((int)(inValues[3]));
            System.DateTime operationDate = ((System.DateTime)(inValues[4]));
            decimal amount = ((decimal)(inValues[5]));
            string comment = ((string)(inValues[6]));
            return ((Fab.Client.ApiServiceReference.ITransactionService)(this)).BeginTransfer(user1Id, account1Id, user2Id, account2Id, operationDate, amount, comment, callback, asyncState);
        }
        
        private object[] OnEndTransfer(System.IAsyncResult result) {
            ((Fab.Client.ApiServiceReference.ITransactionService)(this)).EndTransfer(result);
            return null;
        }
        
        private void OnTransferCompleted(object state) {
            if ((this.TransferCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.TransferCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void TransferAsync(System.Guid user1Id, int account1Id, System.Guid user2Id, int account2Id, System.DateTime operationDate, decimal amount, string comment) {
            this.TransferAsync(user1Id, account1Id, user2Id, account2Id, operationDate, amount, comment, null);
        }
        
        public void TransferAsync(System.Guid user1Id, int account1Id, System.Guid user2Id, int account2Id, System.DateTime operationDate, decimal amount, string comment, object userState) {
            if ((this.onBeginTransferDelegate == null)) {
                this.onBeginTransferDelegate = new BeginOperationDelegate(this.OnBeginTransfer);
            }
            if ((this.onEndTransferDelegate == null)) {
                this.onEndTransferDelegate = new EndOperationDelegate(this.OnEndTransfer);
            }
            if ((this.onTransferCompletedDelegate == null)) {
                this.onTransferCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnTransferCompleted);
            }
            base.InvokeAsync(this.onBeginTransferDelegate, new object[] {
                        user1Id,
                        account1Id,
                        user2Id,
                        account2Id,
                        operationDate,
                        amount,
                        comment}, this.onEndTransferDelegate, this.onTransferCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Fab.Client.ApiServiceReference.ITransactionService.BeginGetAccountBalance(System.Guid userId, int accountId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetAccountBalance(userId, accountId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        decimal Fab.Client.ApiServiceReference.ITransactionService.EndGetAccountBalance(System.IAsyncResult result) {
            return base.Channel.EndGetAccountBalance(result);
        }
        
        private System.IAsyncResult OnBeginGetAccountBalance(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Guid userId = ((System.Guid)(inValues[0]));
            int accountId = ((int)(inValues[1]));
            return ((Fab.Client.ApiServiceReference.ITransactionService)(this)).BeginGetAccountBalance(userId, accountId, callback, asyncState);
        }
        
        private object[] OnEndGetAccountBalance(System.IAsyncResult result) {
            decimal retVal = ((Fab.Client.ApiServiceReference.ITransactionService)(this)).EndGetAccountBalance(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetAccountBalanceCompleted(object state) {
            if ((this.GetAccountBalanceCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetAccountBalanceCompleted(this, new GetAccountBalanceCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetAccountBalanceAsync(System.Guid userId, int accountId) {
            this.GetAccountBalanceAsync(userId, accountId, null);
        }
        
        public void GetAccountBalanceAsync(System.Guid userId, int accountId, object userState) {
            if ((this.onBeginGetAccountBalanceDelegate == null)) {
                this.onBeginGetAccountBalanceDelegate = new BeginOperationDelegate(this.OnBeginGetAccountBalance);
            }
            if ((this.onEndGetAccountBalanceDelegate == null)) {
                this.onEndGetAccountBalanceDelegate = new EndOperationDelegate(this.OnEndGetAccountBalance);
            }
            if ((this.onGetAccountBalanceCompletedDelegate == null)) {
                this.onGetAccountBalanceCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetAccountBalanceCompleted);
            }
            base.InvokeAsync(this.onBeginGetAccountBalanceDelegate, new object[] {
                        userId,
                        accountId}, this.onEndGetAccountBalanceDelegate, this.onGetAccountBalanceCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Fab.Client.ApiServiceReference.ITransactionService.BeginGetAllTransactions(System.Guid userId, int accountId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetAllTransactions(userId, accountId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Fab.Client.ApiServiceReference.TransactionRecord[] Fab.Client.ApiServiceReference.ITransactionService.EndGetAllTransactions(System.IAsyncResult result) {
            return base.Channel.EndGetAllTransactions(result);
        }
        
        private System.IAsyncResult OnBeginGetAllTransactions(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Guid userId = ((System.Guid)(inValues[0]));
            int accountId = ((int)(inValues[1]));
            return ((Fab.Client.ApiServiceReference.ITransactionService)(this)).BeginGetAllTransactions(userId, accountId, callback, asyncState);
        }
        
        private object[] OnEndGetAllTransactions(System.IAsyncResult result) {
            Fab.Client.ApiServiceReference.TransactionRecord[] retVal = ((Fab.Client.ApiServiceReference.ITransactionService)(this)).EndGetAllTransactions(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetAllTransactionsCompleted(object state) {
            if ((this.GetAllTransactionsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetAllTransactionsCompleted(this, new GetAllTransactionsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetAllTransactionsAsync(System.Guid userId, int accountId) {
            this.GetAllTransactionsAsync(userId, accountId, null);
        }
        
        public void GetAllTransactionsAsync(System.Guid userId, int accountId, object userState) {
            if ((this.onBeginGetAllTransactionsDelegate == null)) {
                this.onBeginGetAllTransactionsDelegate = new BeginOperationDelegate(this.OnBeginGetAllTransactions);
            }
            if ((this.onEndGetAllTransactionsDelegate == null)) {
                this.onEndGetAllTransactionsDelegate = new EndOperationDelegate(this.OnEndGetAllTransactions);
            }
            if ((this.onGetAllTransactionsCompletedDelegate == null)) {
                this.onGetAllTransactionsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetAllTransactionsCompleted);
            }
            base.InvokeAsync(this.onBeginGetAllTransactionsDelegate, new object[] {
                        userId,
                        accountId}, this.onEndGetAllTransactionsDelegate, this.onGetAllTransactionsCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Fab.Client.ApiServiceReference.ITransactionService.BeginDeleteTransaction(System.Guid userId, int accountId, int transactionId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDeleteTransaction(userId, accountId, transactionId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void Fab.Client.ApiServiceReference.ITransactionService.EndDeleteTransaction(System.IAsyncResult result) {
            base.Channel.EndDeleteTransaction(result);
        }
        
        private System.IAsyncResult OnBeginDeleteTransaction(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Guid userId = ((System.Guid)(inValues[0]));
            int accountId = ((int)(inValues[1]));
            int transactionId = ((int)(inValues[2]));
            return ((Fab.Client.ApiServiceReference.ITransactionService)(this)).BeginDeleteTransaction(userId, accountId, transactionId, callback, asyncState);
        }
        
        private object[] OnEndDeleteTransaction(System.IAsyncResult result) {
            ((Fab.Client.ApiServiceReference.ITransactionService)(this)).EndDeleteTransaction(result);
            return null;
        }
        
        private void OnDeleteTransactionCompleted(object state) {
            if ((this.DeleteTransactionCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DeleteTransactionCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DeleteTransactionAsync(System.Guid userId, int accountId, int transactionId) {
            this.DeleteTransactionAsync(userId, accountId, transactionId, null);
        }
        
        public void DeleteTransactionAsync(System.Guid userId, int accountId, int transactionId, object userState) {
            if ((this.onBeginDeleteTransactionDelegate == null)) {
                this.onBeginDeleteTransactionDelegate = new BeginOperationDelegate(this.OnBeginDeleteTransaction);
            }
            if ((this.onEndDeleteTransactionDelegate == null)) {
                this.onEndDeleteTransactionDelegate = new EndOperationDelegate(this.OnEndDeleteTransaction);
            }
            if ((this.onDeleteTransactionCompletedDelegate == null)) {
                this.onDeleteTransactionCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDeleteTransactionCompleted);
            }
            base.InvokeAsync(this.onBeginDeleteTransactionDelegate, new object[] {
                        userId,
                        accountId,
                        transactionId}, this.onEndDeleteTransactionDelegate, this.onDeleteTransactionCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override Fab.Client.ApiServiceReference.ITransactionService CreateChannel() {
            return new TransactionServiceClientChannel(this);
        }
        
        private class TransactionServiceClientChannel : ChannelBase<Fab.Client.ApiServiceReference.ITransactionService>, Fab.Client.ApiServiceReference.ITransactionService {
            
            public TransactionServiceClientChannel(System.ServiceModel.ClientBase<Fab.Client.ApiServiceReference.ITransactionService> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginGetAllAssetTypes(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("GetAllAssetTypes", _args, callback, asyncState);
                return _result;
            }
            
            public Fab.Client.ApiServiceReference.AssetType[] EndGetAllAssetTypes(System.IAsyncResult result) {
                object[] _args = new object[0];
                Fab.Client.ApiServiceReference.AssetType[] _result = ((Fab.Client.ApiServiceReference.AssetType[])(base.EndInvoke("GetAllAssetTypes", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetAllJournalTypes(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("GetAllJournalTypes", _args, callback, asyncState);
                return _result;
            }
            
            public Fab.Client.ApiServiceReference.JournalType[] EndGetAllJournalTypes(System.IAsyncResult result) {
                object[] _args = new object[0];
                Fab.Client.ApiServiceReference.JournalType[] _result = ((Fab.Client.ApiServiceReference.JournalType[])(base.EndInvoke("GetAllJournalTypes", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginDeposit(System.Guid userId, int accountId, System.DateTime operationDate, decimal price, decimal quantity, string comment, System.Nullable<int> categoryId, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[7];
                _args[0] = userId;
                _args[1] = accountId;
                _args[2] = operationDate;
                _args[3] = price;
                _args[4] = quantity;
                _args[5] = comment;
                _args[6] = categoryId;
                System.IAsyncResult _result = base.BeginInvoke("Deposit", _args, callback, asyncState);
                return _result;
            }
            
            public void EndDeposit(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("Deposit", _args, result);
            }
            
            public System.IAsyncResult BeginWithdrawal(System.Guid userId, int accountId, System.DateTime operationDate, decimal price, decimal quantity, string comment, System.Nullable<int> categoryId, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[7];
                _args[0] = userId;
                _args[1] = accountId;
                _args[2] = operationDate;
                _args[3] = price;
                _args[4] = quantity;
                _args[5] = comment;
                _args[6] = categoryId;
                System.IAsyncResult _result = base.BeginInvoke("Withdrawal", _args, callback, asyncState);
                return _result;
            }
            
            public void EndWithdrawal(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("Withdrawal", _args, result);
            }
            
            public System.IAsyncResult BeginTransfer(System.Guid user1Id, int account1Id, System.Guid user2Id, int account2Id, System.DateTime operationDate, decimal amount, string comment, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[7];
                _args[0] = user1Id;
                _args[1] = account1Id;
                _args[2] = user2Id;
                _args[3] = account2Id;
                _args[4] = operationDate;
                _args[5] = amount;
                _args[6] = comment;
                System.IAsyncResult _result = base.BeginInvoke("Transfer", _args, callback, asyncState);
                return _result;
            }
            
            public void EndTransfer(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("Transfer", _args, result);
            }
            
            public System.IAsyncResult BeginGetAccountBalance(System.Guid userId, int accountId, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = userId;
                _args[1] = accountId;
                System.IAsyncResult _result = base.BeginInvoke("GetAccountBalance", _args, callback, asyncState);
                return _result;
            }
            
            public decimal EndGetAccountBalance(System.IAsyncResult result) {
                object[] _args = new object[0];
                decimal _result = ((decimal)(base.EndInvoke("GetAccountBalance", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetAllTransactions(System.Guid userId, int accountId, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = userId;
                _args[1] = accountId;
                System.IAsyncResult _result = base.BeginInvoke("GetAllTransactions", _args, callback, asyncState);
                return _result;
            }
            
            public Fab.Client.ApiServiceReference.TransactionRecord[] EndGetAllTransactions(System.IAsyncResult result) {
                object[] _args = new object[0];
                Fab.Client.ApiServiceReference.TransactionRecord[] _result = ((Fab.Client.ApiServiceReference.TransactionRecord[])(base.EndInvoke("GetAllTransactions", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginDeleteTransaction(System.Guid userId, int accountId, int transactionId, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = userId;
                _args[1] = accountId;
                _args[2] = transactionId;
                System.IAsyncResult _result = base.BeginInvoke("DeleteTransaction", _args, callback, asyncState);
                return _result;
            }
            
            public void EndDeleteTransaction(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("DeleteTransaction", _args, result);
            }
        }
    }
}
