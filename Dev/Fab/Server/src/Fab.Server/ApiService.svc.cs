// <copyright file="ApiService.svc.cs" company="HD">
// 	Copyright (c) 2010 HD. All rights reserved.
// </copyright>
// <author name="Andrew Levshoff">
// 	<email>alevshoff@hd.com</email>
// 	<date>2010-01-28</date>
// </author>
// <editor name="Andrew Levshoff">
// 	<email>alevshoff@hd.com</email>
// 	<date>2010-01-28</date>
// </editor>
// <summary>Represent public server API available for clients.</summary>

using System;
using System.Collections.Generic;
using System.Linq;
using Fab.Server.Core;

namespace Fab.Server
{
	/// <summary>
	/// Represent public server API available for clients.
	/// </summary>
	public class ApiService : IUserService, ITransactionService
	{
		#region Implementation of IUserService

		/// <summary>
		/// Generate unique login name for new user.
		/// </summary>
		/// <returns>Unique login name.</returns>
		public string GenerateUniqueLogin()
		{
			throw new NotImplementedException();
		}

		/// <summary>
		/// Check new user login name for uniqueness.
		/// </summary>
		/// <param name="login">User login.</param>
		/// <returns><c>True</c> if user login name is unique.</returns>
		public bool IsLoginAvailable(string login)
		{
			using (var mc = new ModelContainer())
			{
				return mc.Users.Where(u => u.Login == login).SingleOrDefault() == null;
			}
		}

		/// <summary>
		/// Register new user with unique login name and password.
		/// </summary>
		/// <param name="login">User login name.</param>
		/// <param name="password">User password.</param>
		public void Register(string login, string password)
		{
			using (var mc = new ModelContainer())
			{
				User user = mc.Users.CreateObject();
				
				user.Login = login;
				// Todo: use hash algorithm instead of plain text here!
				user.Password = password.Trim();
				user.Registered = DateTime.UtcNow;

				mc.AddToUsers(user);
				mc.SaveChanges();
			}
		}

		/// <summary>
		/// Change user password or email to new values.
		/// </summary>
		/// <param name="login">User login name.</param>
		/// <param name="oldPassword">User old password.</param>
		/// <param name="newPassword">User new password.</param>
		/// <param name="newEmail">User new email.</param>
		public void Update(string login, string oldPassword, string newPassword, string newEmail)
		{
			throw new NotImplementedException();
		}

		/// <summary>
		/// If user with specified login name have email and this email is match to specified email,
		/// then system will reset current password for this user to autogenerated new one
		/// and sent it to the specified email.
		/// </summary>
		/// <param name="login">User login name.</param>
		/// <param name="email">User email.</param>
		public void ResetPassword(string login, string email)
		{
			throw new NotImplementedException();
		}

		#endregion

		#region Implementation of ITransactionService

		/// <summary>
		/// Gets all available asset types (i.e. "currency names").
		/// </summary>
		/// <returns>Asset types presented in the system.</returns>
		public IList<AssetType> GetAllAssetTypes()
		{
			using (var mc = new ModelContainer())
			{
				return mc.AssetTypes.ToList();
			}
		}

		/// <summary>
		/// Gets all available journal types (i.e. "Deposit", "Withdrawal", "Transfer" etc.).
		/// </summary>
		/// <returns>Journal types presented in the system.</returns>
		public IList<JournalType> GetAllJournalTypes()
		{
			using (var mc = new ModelContainer())
			{
				return mc.JournalTypes.ToList();
			}
		}

		#endregion
	}
}